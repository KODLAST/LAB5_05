
LAB5_05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f50  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080040f0  080040f0  000140f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042c8  080042c8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080042c8  080042c8  000142c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042d0  080042d0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042d0  080042d0  000142d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042d4  080042d4  000142d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080042d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000078  08004350  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08004350  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d13  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001730  00000000  00000000  00028dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  0002a4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000660  00000000  00000000  0002abd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015973  00000000  00000000  0002b238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c2d  00000000  00000000  00040bab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085dde  00000000  00000000  000497d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf5b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ef4  00000000  00000000  000cf608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080040d8 	.word	0x080040d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080040d8 	.word	0x080040d8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000598:	f000 fcda 	bl	8000f50 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800059c:	f000 f9d6 	bl	800094c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005a0:	f000 fa90 	bl	8000ac4 <MX_GPIO_Init>
	MX_DMA_Init();
 80005a4:	f000 fa66 	bl	8000a74 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80005a8:	f000 fa3a 	bl	8000a20 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	UARTInteruptConfig();
 80005ac:	f000 faf8 	bl	8000ba0 <UARTInteruptConfig>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		switch (State) {
 80005b0:	4b98      	ldr	r3, [pc, #608]	; (8000814 <main+0x280>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b07      	cmp	r3, #7
 80005b6:	d8fb      	bhi.n	80005b0 <main+0x1c>
 80005b8:	a201      	add	r2, pc, #4	; (adr r2, 80005c0 <main+0x2c>)
 80005ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005be:	bf00      	nop
 80005c0:	080005e1 	.word	0x080005e1
 80005c4:	0800060b 	.word	0x0800060b
 80005c8:	0800064b 	.word	0x0800064b
 80005cc:	080005b1 	.word	0x080005b1
 80005d0:	0800084d 	.word	0x0800084d
 80005d4:	080008b7 	.word	0x080008b7
 80005d8:	080005b1 	.word	0x080005b1
 80005dc:	08000879 	.word	0x08000879
		case 0:
			RxBuffer[1] = '\0';
 80005e0:	4b8d      	ldr	r3, [pc, #564]	; (8000818 <main+0x284>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	705a      	strb	r2, [r3, #1]
			Tx2Buffer[200];
			sprintf((char*) Tx2Buffer,
 80005e6:	4a8c      	ldr	r2, [pc, #560]	; (8000818 <main+0x284>)
 80005e8:	498c      	ldr	r1, [pc, #560]	; (800081c <main+0x288>)
 80005ea:	488d      	ldr	r0, [pc, #564]	; (8000820 <main+0x28c>)
 80005ec:	f003 f906 	bl	80037fc <siprintf>
					"\r\nPlease select the Mode: \r\n   Mode Number 1   : LED Controller \r\n   Mode Number 2   : Button Check\r\npress X to return to Main menu\r\n",
					RxBuffer);
			HAL_UART_Transmit_IT(&huart2, Tx2Buffer, strlen((char*) Tx2Buffer));
 80005f0:	488b      	ldr	r0, [pc, #556]	; (8000820 <main+0x28c>)
 80005f2:	f7ff fdf5 	bl	80001e0 <strlen>
 80005f6:	4603      	mov	r3, r0
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	461a      	mov	r2, r3
 80005fc:	4988      	ldr	r1, [pc, #544]	; (8000820 <main+0x28c>)
 80005fe:	4889      	ldr	r0, [pc, #548]	; (8000824 <main+0x290>)
 8000600:	f002 f8ed 	bl	80027de <HAL_UART_Transmit_IT>
			State = 1;
 8000604:	4b83      	ldr	r3, [pc, #524]	; (8000814 <main+0x280>)
 8000606:	2201      	movs	r2, #1
 8000608:	701a      	strb	r2, [r3, #0]
		case 1:
			if (RxBuffer[0] == 49) {
 800060a:	4b83      	ldr	r3, [pc, #524]	; (8000818 <main+0x284>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b31      	cmp	r3, #49	; 0x31
 8000610:	d112      	bne.n	8000638 <main+0xa4>
				Tx2Buffer[200];
				sprintf((char*) Tx2Buffer,
 8000612:	4a81      	ldr	r2, [pc, #516]	; (8000818 <main+0x284>)
 8000614:	4984      	ldr	r1, [pc, #528]	; (8000828 <main+0x294>)
 8000616:	4882      	ldr	r0, [pc, #520]	; (8000820 <main+0x28c>)
 8000618:	f003 f8f0 	bl	80037fc <siprintf>
						"Welcome to LED Controller Mode \r\na : +1Hz\r\ns : -1Hz\r\nx : return to Main menu\r\n",
						RxBuffer);
				HAL_UART_Transmit_IT(&huart2, Tx2Buffer,
						strlen((char*) Tx2Buffer));
 800061c:	4880      	ldr	r0, [pc, #512]	; (8000820 <main+0x28c>)
 800061e:	f7ff fddf 	bl	80001e0 <strlen>
 8000622:	4603      	mov	r3, r0
				HAL_UART_Transmit_IT(&huart2, Tx2Buffer,
 8000624:	b29b      	uxth	r3, r3
 8000626:	461a      	mov	r2, r3
 8000628:	497d      	ldr	r1, [pc, #500]	; (8000820 <main+0x28c>)
 800062a:	487e      	ldr	r0, [pc, #504]	; (8000824 <main+0x290>)
 800062c:	f002 f8d7 	bl	80027de <HAL_UART_Transmit_IT>

				State = 2;
 8000630:	4b78      	ldr	r3, [pc, #480]	; (8000814 <main+0x280>)
 8000632:	2202      	movs	r2, #2
 8000634:	701a      	strb	r2, [r3, #0]
			} else if (RxBuffer[0] == 50) {
				State = 4;
			}
			break;
 8000636:	e16f      	b.n	8000918 <main+0x384>
			} else if (RxBuffer[0] == 50) {
 8000638:	4b77      	ldr	r3, [pc, #476]	; (8000818 <main+0x284>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b32      	cmp	r3, #50	; 0x32
 800063e:	f040 816b 	bne.w	8000918 <main+0x384>
				State = 4;
 8000642:	4b74      	ldr	r3, [pc, #464]	; (8000814 <main+0x280>)
 8000644:	2204      	movs	r2, #4
 8000646:	701a      	strb	r2, [r3, #0]
			break;
 8000648:	e166      	b.n	8000918 <main+0x384>

		case 2:
			if (State == 2) {
 800064a:	4b72      	ldr	r3, [pc, #456]	; (8000814 <main+0x280>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b02      	cmp	r3, #2
 8000650:	f040 8164 	bne.w	800091c <main+0x388>

				static uint32_t timestamp = 0;
				if (HAL_GetTick() > timestamp) {
 8000654:	f000 fce2 	bl	800101c <HAL_GetTick>
 8000658:	4602      	mov	r2, r0
 800065a:	4b74      	ldr	r3, [pc, #464]	; (800082c <main+0x298>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	429a      	cmp	r2, r3
 8000660:	d914      	bls.n	800068c <main+0xf8>
					timestamp = HAL_GetTick() + HzMs;
 8000662:	f000 fcdb 	bl	800101c <HAL_GetTick>
 8000666:	ee07 0a90 	vmov	s15, r0
 800066a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800066e:	4b70      	ldr	r3, [pc, #448]	; (8000830 <main+0x29c>)
 8000670:	edd3 7a00 	vldr	s15, [r3]
 8000674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800067c:	ee17 2a90 	vmov	r2, s15
 8000680:	4b6a      	ldr	r3, [pc, #424]	; (800082c <main+0x298>)
 8000682:	601a      	str	r2, [r3, #0]
					HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000684:	2120      	movs	r1, #32
 8000686:	486b      	ldr	r0, [pc, #428]	; (8000834 <main+0x2a0>)
 8000688:	f001 fb17 	bl	8001cba <HAL_GPIO_TogglePin>
				}
				if (RxBuffer[0] == 97) {
 800068c:	4b62      	ldr	r3, [pc, #392]	; (8000818 <main+0x284>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b61      	cmp	r3, #97	; 0x61
 8000692:	d131      	bne.n	80006f8 <main+0x164>
					Hz = Hz + 1;
 8000694:	4b68      	ldr	r3, [pc, #416]	; (8000838 <main+0x2a4>)
 8000696:	edd3 7a00 	vldr	s15, [r3]
 800069a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800069e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006a2:	4b65      	ldr	r3, [pc, #404]	; (8000838 <main+0x2a4>)
 80006a4:	edc3 7a00 	vstr	s15, [r3]
					HzShow = Hz;
 80006a8:	4b63      	ldr	r3, [pc, #396]	; (8000838 <main+0x2a4>)
 80006aa:	edd3 7a00 	vldr	s15, [r3]
 80006ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006b2:	ee17 2a90 	vmov	r2, s15
 80006b6:	4b61      	ldr	r3, [pc, #388]	; (800083c <main+0x2a8>)
 80006b8:	601a      	str	r2, [r3, #0]
					sprintf((char*) Tx2Buffer, "Speed LED Light is %d Hz\r\n",
 80006ba:	4b60      	ldr	r3, [pc, #384]	; (800083c <main+0x2a8>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	461a      	mov	r2, r3
 80006c0:	495f      	ldr	r1, [pc, #380]	; (8000840 <main+0x2ac>)
 80006c2:	4857      	ldr	r0, [pc, #348]	; (8000820 <main+0x28c>)
 80006c4:	f003 f89a 	bl	80037fc <siprintf>
							HzShow);
					HAL_UART_Transmit_IT(&huart2, Tx2Buffer,
							strlen((char*) Tx2Buffer));
 80006c8:	4855      	ldr	r0, [pc, #340]	; (8000820 <main+0x28c>)
 80006ca:	f7ff fd89 	bl	80001e0 <strlen>
 80006ce:	4603      	mov	r3, r0
					HAL_UART_Transmit_IT(&huart2, Tx2Buffer,
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	461a      	mov	r2, r3
 80006d4:	4952      	ldr	r1, [pc, #328]	; (8000820 <main+0x28c>)
 80006d6:	4853      	ldr	r0, [pc, #332]	; (8000824 <main+0x290>)
 80006d8:	f002 f881 	bl	80027de <HAL_UART_Transmit_IT>
					HzMs = (500 / Hz);
 80006dc:	4b56      	ldr	r3, [pc, #344]	; (8000838 <main+0x2a4>)
 80006de:	ed93 7a00 	vldr	s14, [r3]
 80006e2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8000844 <main+0x2b0>
 80006e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006ea:	4b51      	ldr	r3, [pc, #324]	; (8000830 <main+0x29c>)
 80006ec:	edc3 7a00 	vstr	s15, [r3]
					RxBuffer[0] = 0;
 80006f0:	4b49      	ldr	r3, [pc, #292]	; (8000818 <main+0x284>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
 80006f6:	e069      	b.n	80007cc <main+0x238>

				} else if (RxBuffer[0] == 115) {
 80006f8:	4b47      	ldr	r3, [pc, #284]	; (8000818 <main+0x284>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b73      	cmp	r3, #115	; 0x73
 80006fe:	d165      	bne.n	80007cc <main+0x238>
					if (Hz > 1) {
 8000700:	4b4d      	ldr	r3, [pc, #308]	; (8000838 <main+0x2a4>)
 8000702:	edd3 7a00 	vldr	s15, [r3]
 8000706:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800070a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800070e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000712:	dd31      	ble.n	8000778 <main+0x1e4>
						Hz = Hz - 1;
 8000714:	4b48      	ldr	r3, [pc, #288]	; (8000838 <main+0x2a4>)
 8000716:	edd3 7a00 	vldr	s15, [r3]
 800071a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800071e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000722:	4b45      	ldr	r3, [pc, #276]	; (8000838 <main+0x2a4>)
 8000724:	edc3 7a00 	vstr	s15, [r3]
						HzShow = Hz;
 8000728:	4b43      	ldr	r3, [pc, #268]	; (8000838 <main+0x2a4>)
 800072a:	edd3 7a00 	vldr	s15, [r3]
 800072e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000732:	ee17 2a90 	vmov	r2, s15
 8000736:	4b41      	ldr	r3, [pc, #260]	; (800083c <main+0x2a8>)
 8000738:	601a      	str	r2, [r3, #0]
						sprintf((char*) Tx2Buffer,
 800073a:	4b40      	ldr	r3, [pc, #256]	; (800083c <main+0x2a8>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	461a      	mov	r2, r3
 8000740:	493f      	ldr	r1, [pc, #252]	; (8000840 <main+0x2ac>)
 8000742:	4837      	ldr	r0, [pc, #220]	; (8000820 <main+0x28c>)
 8000744:	f003 f85a 	bl	80037fc <siprintf>
								"Speed LED Light is %d Hz\r\n", HzShow);
						HAL_UART_Transmit_IT(&huart2, Tx2Buffer,
								strlen((char*) Tx2Buffer));
 8000748:	4835      	ldr	r0, [pc, #212]	; (8000820 <main+0x28c>)
 800074a:	f7ff fd49 	bl	80001e0 <strlen>
 800074e:	4603      	mov	r3, r0
						HAL_UART_Transmit_IT(&huart2, Tx2Buffer,
 8000750:	b29b      	uxth	r3, r3
 8000752:	461a      	mov	r2, r3
 8000754:	4932      	ldr	r1, [pc, #200]	; (8000820 <main+0x28c>)
 8000756:	4833      	ldr	r0, [pc, #204]	; (8000824 <main+0x290>)
 8000758:	f002 f841 	bl	80027de <HAL_UART_Transmit_IT>
						HzMs = (500 / Hz);
 800075c:	4b36      	ldr	r3, [pc, #216]	; (8000838 <main+0x2a4>)
 800075e:	ed93 7a00 	vldr	s14, [r3]
 8000762:	eddf 6a38 	vldr	s13, [pc, #224]	; 8000844 <main+0x2b0>
 8000766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800076a:	4b31      	ldr	r3, [pc, #196]	; (8000830 <main+0x29c>)
 800076c:	edc3 7a00 	vstr	s15, [r3]
						RxBuffer[0] = 0;
 8000770:	4b29      	ldr	r3, [pc, #164]	; (8000818 <main+0x284>)
 8000772:	2200      	movs	r2, #0
 8000774:	701a      	strb	r2, [r3, #0]
 8000776:	e029      	b.n	80007cc <main+0x238>

					}

					else if (Hz == 1) {
 8000778:	4b2f      	ldr	r3, [pc, #188]	; (8000838 <main+0x2a4>)
 800077a:	edd3 7a00 	vldr	s15, [r3]
 800077e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000782:	eef4 7a47 	vcmp.f32	s15, s14
 8000786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800078a:	d11f      	bne.n	80007cc <main+0x238>
						HzMs = 0;
 800078c:	4b28      	ldr	r3, [pc, #160]	; (8000830 <main+0x29c>)
 800078e:	f04f 0200 	mov.w	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
						HzShow = 0;
 8000794:	4b29      	ldr	r3, [pc, #164]	; (800083c <main+0x2a8>)
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
						sprintf((char*) Tx2Buffer,
 800079a:	4b28      	ldr	r3, [pc, #160]	; (800083c <main+0x2a8>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	461a      	mov	r2, r3
 80007a0:	4927      	ldr	r1, [pc, #156]	; (8000840 <main+0x2ac>)
 80007a2:	481f      	ldr	r0, [pc, #124]	; (8000820 <main+0x28c>)
 80007a4:	f003 f82a 	bl	80037fc <siprintf>
								"Speed LED Light is %d Hz\r\n", HzShow);
						HAL_UART_Transmit_IT(&huart2, Tx2Buffer,
								strlen((char*) Tx2Buffer));
 80007a8:	481d      	ldr	r0, [pc, #116]	; (8000820 <main+0x28c>)
 80007aa:	f7ff fd19 	bl	80001e0 <strlen>
 80007ae:	4603      	mov	r3, r0
						HAL_UART_Transmit_IT(&huart2, Tx2Buffer,
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	461a      	mov	r2, r3
 80007b4:	491a      	ldr	r1, [pc, #104]	; (8000820 <main+0x28c>)
 80007b6:	481b      	ldr	r0, [pc, #108]	; (8000824 <main+0x290>)
 80007b8:	f002 f811 	bl	80027de <HAL_UART_Transmit_IT>
						HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2120      	movs	r1, #32
 80007c0:	481c      	ldr	r0, [pc, #112]	; (8000834 <main+0x2a0>)
 80007c2:	f001 fa61 	bl	8001c88 <HAL_GPIO_WritePin>
						RxBuffer[0] = 0;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <main+0x284>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	701a      	strb	r2, [r3, #0]
					}
				}
				if (RxBuffer[0] == 100) {
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <main+0x284>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b64      	cmp	r3, #100	; 0x64
 80007d2:	d116      	bne.n	8000802 <main+0x26e>
					sprintf((char*) Tx2Buffer, "LED OFF\r\n", HzShow);
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <main+0x2a8>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	491b      	ldr	r1, [pc, #108]	; (8000848 <main+0x2b4>)
 80007dc:	4810      	ldr	r0, [pc, #64]	; (8000820 <main+0x28c>)
 80007de:	f003 f80d 	bl	80037fc <siprintf>
					HAL_UART_Transmit_IT(&huart2, Tx2Buffer,
							strlen((char*) Tx2Buffer));
 80007e2:	480f      	ldr	r0, [pc, #60]	; (8000820 <main+0x28c>)
 80007e4:	f7ff fcfc 	bl	80001e0 <strlen>
 80007e8:	4603      	mov	r3, r0
					HAL_UART_Transmit_IT(&huart2, Tx2Buffer,
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	461a      	mov	r2, r3
 80007ee:	490c      	ldr	r1, [pc, #48]	; (8000820 <main+0x28c>)
 80007f0:	480c      	ldr	r0, [pc, #48]	; (8000824 <main+0x290>)
 80007f2:	f001 fff4 	bl	80027de <HAL_UART_Transmit_IT>

					RxBuffer[0] = 0;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <main+0x284>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
					State = 5;
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <main+0x280>)
 80007fe:	2205      	movs	r2, #5
 8000800:	701a      	strb	r2, [r3, #0]
				}

				if (RxBuffer[0] == 120) {
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <main+0x284>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b78      	cmp	r3, #120	; 0x78
 8000808:	f040 8088 	bne.w	800091c <main+0x388>
					State = 0;
 800080c:	4b01      	ldr	r3, [pc, #4]	; (8000814 <main+0x280>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8000812:	e083      	b.n	800091c <main+0x388>
 8000814:	20000278 	.word	0x20000278
 8000818:	20000198 	.word	0x20000198
 800081c:	080040f0 	.word	0x080040f0
 8000820:	200001b0 	.word	0x200001b0
 8000824:	20000094 	.word	0x20000094
 8000828:	08004178 	.word	0x08004178
 800082c:	20000280 	.word	0x20000280
 8000830:	2000027c 	.word	0x2000027c
 8000834:	40020000 	.word	0x40020000
 8000838:	20000000 	.word	0x20000000
 800083c:	20000004 	.word	0x20000004
 8000840:	080041c8 	.word	0x080041c8
 8000844:	43fa0000 	.word	0x43fa0000
 8000848:	080041e4 	.word	0x080041e4
		case 4:
			if (State == 4) {
 800084c:	4b35      	ldr	r3, [pc, #212]	; (8000924 <main+0x390>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b04      	cmp	r3, #4
 8000852:	d111      	bne.n	8000878 <main+0x2e4>
				sprintf((char*) Tx2Buffer, "Welcome to Button Check Mode!\r\nPlease Press Button \r\npress X to return to Main menu\r\n", RxBuffer);
 8000854:	4a34      	ldr	r2, [pc, #208]	; (8000928 <main+0x394>)
 8000856:	4935      	ldr	r1, [pc, #212]	; (800092c <main+0x398>)
 8000858:	4835      	ldr	r0, [pc, #212]	; (8000930 <main+0x39c>)
 800085a:	f002 ffcf 	bl	80037fc <siprintf>
				HAL_UART_Transmit_IT(&huart2, Tx2Buffer,
						strlen((char*) Tx2Buffer));
 800085e:	4834      	ldr	r0, [pc, #208]	; (8000930 <main+0x39c>)
 8000860:	f7ff fcbe 	bl	80001e0 <strlen>
 8000864:	4603      	mov	r3, r0
				HAL_UART_Transmit_IT(&huart2, Tx2Buffer,
 8000866:	b29b      	uxth	r3, r3
 8000868:	461a      	mov	r2, r3
 800086a:	4931      	ldr	r1, [pc, #196]	; (8000930 <main+0x39c>)
 800086c:	4831      	ldr	r0, [pc, #196]	; (8000934 <main+0x3a0>)
 800086e:	f001 ffb6 	bl	80027de <HAL_UART_Transmit_IT>
				State =7;}
 8000872:	4b2c      	ldr	r3, [pc, #176]	; (8000924 <main+0x390>)
 8000874:	2207      	movs	r2, #7
 8000876:	701a      	strb	r2, [r3, #0]
		case 7:
				if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0) {
 8000878:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800087c:	482e      	ldr	r0, [pc, #184]	; (8000938 <main+0x3a4>)
 800087e:	f001 f9eb 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d10e      	bne.n	80008a6 <main+0x312>
					sprintf((char*) Tx2Buffer, "Button Press!\r\n", RxBuffer);
 8000888:	4a27      	ldr	r2, [pc, #156]	; (8000928 <main+0x394>)
 800088a:	492c      	ldr	r1, [pc, #176]	; (800093c <main+0x3a8>)
 800088c:	4828      	ldr	r0, [pc, #160]	; (8000930 <main+0x39c>)
 800088e:	f002 ffb5 	bl	80037fc <siprintf>
					HAL_UART_Transmit_IT(&huart2, Tx2Buffer,
							strlen((char*) Tx2Buffer));
 8000892:	4827      	ldr	r0, [pc, #156]	; (8000930 <main+0x39c>)
 8000894:	f7ff fca4 	bl	80001e0 <strlen>
 8000898:	4603      	mov	r3, r0
					HAL_UART_Transmit_IT(&huart2, Tx2Buffer,
 800089a:	b29b      	uxth	r3, r3
 800089c:	461a      	mov	r2, r3
 800089e:	4924      	ldr	r1, [pc, #144]	; (8000930 <main+0x39c>)
 80008a0:	4824      	ldr	r0, [pc, #144]	; (8000934 <main+0x3a0>)
 80008a2:	f001 ff9c 	bl	80027de <HAL_UART_Transmit_IT>
				}
				if (RxBuffer[0] == 120) {
 80008a6:	4b20      	ldr	r3, [pc, #128]	; (8000928 <main+0x394>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b78      	cmp	r3, #120	; 0x78
 80008ac:	d138      	bne.n	8000920 <main+0x38c>
					State = 0;
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <main+0x390>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
				}


			break;
 80008b4:	e034      	b.n	8000920 <main+0x38c>
		case 5:

			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2120      	movs	r1, #32
 80008ba:	4821      	ldr	r0, [pc, #132]	; (8000940 <main+0x3ac>)
 80008bc:	f001 f9e4 	bl	8001c88 <HAL_GPIO_WritePin>
			if (RxBuffer[0] == 100) {
 80008c0:	4b19      	ldr	r3, [pc, #100]	; (8000928 <main+0x394>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b64      	cmp	r3, #100	; 0x64
 80008c6:	d11b      	bne.n	8000900 <main+0x36c>
				RxBuffer[0] = 0;
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <main+0x394>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	2120      	movs	r1, #32
 80008d2:	481b      	ldr	r0, [pc, #108]	; (8000940 <main+0x3ac>)
 80008d4:	f001 f9d8 	bl	8001c88 <HAL_GPIO_WritePin>
				sprintf((char*) Tx2Buffer, "LED ON\r\n", HzShow);
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <main+0x3b0>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	491a      	ldr	r1, [pc, #104]	; (8000948 <main+0x3b4>)
 80008e0:	4813      	ldr	r0, [pc, #76]	; (8000930 <main+0x39c>)
 80008e2:	f002 ff8b 	bl	80037fc <siprintf>
				HAL_UART_Transmit_IT(&huart2, Tx2Buffer,
						strlen((char*) Tx2Buffer));
 80008e6:	4812      	ldr	r0, [pc, #72]	; (8000930 <main+0x39c>)
 80008e8:	f7ff fc7a 	bl	80001e0 <strlen>
 80008ec:	4603      	mov	r3, r0
				HAL_UART_Transmit_IT(&huart2, Tx2Buffer,
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	461a      	mov	r2, r3
 80008f2:	490f      	ldr	r1, [pc, #60]	; (8000930 <main+0x39c>)
 80008f4:	480f      	ldr	r0, [pc, #60]	; (8000934 <main+0x3a0>)
 80008f6:	f001 ff72 	bl	80027de <HAL_UART_Transmit_IT>
				State = 2;
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <main+0x390>)
 80008fc:	2202      	movs	r2, #2
 80008fe:	701a      	strb	r2, [r3, #0]
			}
			if (RxBuffer[0] == 120) {
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <main+0x394>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b78      	cmp	r3, #120	; 0x78
 8000906:	f47f ae53 	bne.w	80005b0 <main+0x1c>
				RxBuffer[0] = 0;
 800090a:	4b07      	ldr	r3, [pc, #28]	; (8000928 <main+0x394>)
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
				State = 0;
 8000910:	4b04      	ldr	r3, [pc, #16]	; (8000924 <main+0x390>)
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]
 8000916:	e64b      	b.n	80005b0 <main+0x1c>
			break;
 8000918:	bf00      	nop
 800091a:	e649      	b.n	80005b0 <main+0x1c>
			break;
 800091c:	bf00      	nop
 800091e:	e647      	b.n	80005b0 <main+0x1c>
			break;
 8000920:	bf00      	nop
		switch (State) {
 8000922:	e645      	b.n	80005b0 <main+0x1c>
 8000924:	20000278 	.word	0x20000278
 8000928:	20000198 	.word	0x20000198
 800092c:	080041f0 	.word	0x080041f0
 8000930:	200001b0 	.word	0x200001b0
 8000934:	20000094 	.word	0x20000094
 8000938:	40020800 	.word	0x40020800
 800093c:	08004248 	.word	0x08004248
 8000940:	40020000 	.word	0x40020000
 8000944:	20000004 	.word	0x20000004
 8000948:	08004258 	.word	0x08004258

0800094c <SystemClock_Config>:
}
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b094      	sub	sp, #80	; 0x50
 8000950:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000952:	f107 0320 	add.w	r3, r7, #32
 8000956:	2230      	movs	r2, #48	; 0x30
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f002 ff46 	bl	80037ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000970:	2300      	movs	r3, #0
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	4b28      	ldr	r3, [pc, #160]	; (8000a18 <SystemClock_Config+0xcc>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000978:	4a27      	ldr	r2, [pc, #156]	; (8000a18 <SystemClock_Config+0xcc>)
 800097a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097e:	6413      	str	r3, [r2, #64]	; 0x40
 8000980:	4b25      	ldr	r3, [pc, #148]	; (8000a18 <SystemClock_Config+0xcc>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800098c:	2300      	movs	r3, #0
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <SystemClock_Config+0xd0>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a21      	ldr	r2, [pc, #132]	; (8000a1c <SystemClock_Config+0xd0>)
 8000996:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <SystemClock_Config+0xd0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a8:	2302      	movs	r3, #2
 80009aa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ac:	2301      	movs	r3, #1
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b0:	2310      	movs	r3, #16
 80009b2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b4:	2302      	movs	r3, #2
 80009b6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b8:	2300      	movs	r3, #0
 80009ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80009bc:	2310      	movs	r3, #16
 80009be:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80009c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009c4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009c6:	2304      	movs	r3, #4
 80009c8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ca:	2304      	movs	r3, #4
 80009cc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009ce:	f107 0320 	add.w	r3, r7, #32
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 f98c 	bl	8001cf0 <HAL_RCC_OscConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0x96>
		Error_Handler();
 80009de:	f000 f919 	bl	8000c14 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80009e2:	230f      	movs	r3, #15
 80009e4:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e6:	2302      	movs	r3, #2
 80009e8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2102      	movs	r1, #2
 80009fe:	4618      	mov	r0, r3
 8000a00:	f001 fbee 	bl	80021e0 <HAL_RCC_ClockConfig>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0xc2>
		Error_Handler();
 8000a0a:	f000 f903 	bl	8000c14 <Error_Handler>
	}
}
 8000a0e:	bf00      	nop
 8000a10:	3750      	adds	r7, #80	; 0x50
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40007000 	.word	0x40007000

08000a20 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a26:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <MX_USART2_UART_Init+0x50>)
 8000a28:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 230400;
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a2c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000a30:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a46:	220c      	movs	r2, #12
 8000a48:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a58:	f001 fde2 	bl	8002620 <HAL_UART_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000a62:	f000 f8d7 	bl	8000c14 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000094 	.word	0x20000094
 8000a70:	40004400 	.word	0x40004400

08000a74 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <MX_DMA_Init+0x4c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a0f      	ldr	r2, [pc, #60]	; (8000ac0 <MX_DMA_Init+0x4c>)
 8000a84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <MX_DMA_Init+0x4c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2010      	movs	r0, #16
 8000a9c:	f000 fba5 	bl	80011ea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000aa0:	2010      	movs	r0, #16
 8000aa2:	f000 fbbe 	bl	8001222 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2011      	movs	r0, #17
 8000aac:	f000 fb9d 	bl	80011ea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ab0:	2011      	movs	r0, #17
 8000ab2:	f000 fbb6 	bl	8001222 <HAL_NVIC_EnableIRQ>

}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	4b2d      	ldr	r3, [pc, #180]	; (8000b94 <MX_GPIO_Init+0xd0>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a2c      	ldr	r2, [pc, #176]	; (8000b94 <MX_GPIO_Init+0xd0>)
 8000ae4:	f043 0304 	orr.w	r3, r3, #4
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <MX_GPIO_Init+0xd0>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0304 	and.w	r3, r3, #4
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <MX_GPIO_Init+0xd0>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a25      	ldr	r2, [pc, #148]	; (8000b94 <MX_GPIO_Init+0xd0>)
 8000b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <MX_GPIO_Init+0xd0>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <MX_GPIO_Init+0xd0>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a1e      	ldr	r2, [pc, #120]	; (8000b94 <MX_GPIO_Init+0xd0>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <MX_GPIO_Init+0xd0>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <MX_GPIO_Init+0xd0>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <MX_GPIO_Init+0xd0>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <MX_GPIO_Init+0xd0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2120      	movs	r1, #32
 8000b4e:	4812      	ldr	r0, [pc, #72]	; (8000b98 <MX_GPIO_Init+0xd4>)
 8000b50:	f001 f89a 	bl	8001c88 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000b54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b58:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b5a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b5e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480c      	ldr	r0, [pc, #48]	; (8000b9c <MX_GPIO_Init+0xd8>)
 8000b6c:	f000 fef0 	bl	8001950 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000b70:	2320      	movs	r3, #32
 8000b72:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	4804      	ldr	r0, [pc, #16]	; (8000b98 <MX_GPIO_Init+0xd4>)
 8000b88:	f000 fee2 	bl	8001950 <HAL_GPIO_Init>

}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	40020800 	.word	0x40020800

08000ba0 <UARTInteruptConfig>:

/* USER CODE BEGIN 4 */
void UARTInteruptConfig() {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4903      	ldr	r1, [pc, #12]	; (8000bb4 <UARTInteruptConfig+0x14>)
 8000ba8:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <UARTInteruptConfig+0x18>)
 8000baa:	f001 fe5d 	bl	8002868 <HAL_UART_Receive_IT>
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000198 	.word	0x20000198
 8000bb8:	20000094 	.word	0x20000094

08000bbc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <HAL_UART_RxCpltCallback+0x48>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d116      	bne.n	8000bfa <HAL_UART_RxCpltCallback+0x3e>
		RxBuffer[1] = '\0';
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_UART_RxCpltCallback+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	705a      	strb	r2, [r3, #1]
		sprintf((char*) TxBuffer, "Received : %s\r\n", RxBuffer);
 8000bd2:	4a0d      	ldr	r2, [pc, #52]	; (8000c08 <HAL_UART_RxCpltCallback+0x4c>)
 8000bd4:	490d      	ldr	r1, [pc, #52]	; (8000c0c <HAL_UART_RxCpltCallback+0x50>)
 8000bd6:	480e      	ldr	r0, [pc, #56]	; (8000c10 <HAL_UART_RxCpltCallback+0x54>)
 8000bd8:	f002 fe10 	bl	80037fc <siprintf>
		HAL_UART_Transmit(&huart2, TxBuffer, strlen((char*) TxBuffer), 100);
 8000bdc:	480c      	ldr	r0, [pc, #48]	; (8000c10 <HAL_UART_RxCpltCallback+0x54>)
 8000bde:	f7ff faff 	bl	80001e0 <strlen>
 8000be2:	4603      	mov	r3, r0
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	2364      	movs	r3, #100	; 0x64
 8000be8:	4909      	ldr	r1, [pc, #36]	; (8000c10 <HAL_UART_RxCpltCallback+0x54>)
 8000bea:	4806      	ldr	r0, [pc, #24]	; (8000c04 <HAL_UART_RxCpltCallback+0x48>)
 8000bec:	f001 fd65 	bl	80026ba <HAL_UART_Transmit>

		HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	4905      	ldr	r1, [pc, #20]	; (8000c08 <HAL_UART_RxCpltCallback+0x4c>)
 8000bf4:	4803      	ldr	r0, [pc, #12]	; (8000c04 <HAL_UART_RxCpltCallback+0x48>)
 8000bf6:	f001 fe37 	bl	8002868 <HAL_UART_Receive_IT>
	}
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000094 	.word	0x20000094
 8000c08:	20000198 	.word	0x20000198
 8000c0c:	08004264 	.word	0x08004264
 8000c10:	2000019c 	.word	0x2000019c

08000c14 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c1c:	e7fe      	b.n	8000c1c <Error_Handler+0x8>
	...

08000c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	4a0f      	ldr	r2, [pc, #60]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c34:	6453      	str	r3, [r2, #68]	; 0x44
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a08      	ldr	r2, [pc, #32]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c5e:	2007      	movs	r0, #7
 8000c60:	f000 fab8 	bl	80011d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40023800 	.word	0x40023800

08000c70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a4c      	ldr	r2, [pc, #304]	; (8000dc0 <HAL_UART_MspInit+0x150>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	f040 8091 	bne.w	8000db6 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c94:	2300      	movs	r3, #0
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	4b4a      	ldr	r3, [pc, #296]	; (8000dc4 <HAL_UART_MspInit+0x154>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9c:	4a49      	ldr	r2, [pc, #292]	; (8000dc4 <HAL_UART_MspInit+0x154>)
 8000c9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca4:	4b47      	ldr	r3, [pc, #284]	; (8000dc4 <HAL_UART_MspInit+0x154>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	4b43      	ldr	r3, [pc, #268]	; (8000dc4 <HAL_UART_MspInit+0x154>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb8:	4a42      	ldr	r2, [pc, #264]	; (8000dc4 <HAL_UART_MspInit+0x154>)
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc0:	4b40      	ldr	r3, [pc, #256]	; (8000dc4 <HAL_UART_MspInit+0x154>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ccc:	230c      	movs	r3, #12
 8000cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cdc:	2307      	movs	r3, #7
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4838      	ldr	r0, [pc, #224]	; (8000dc8 <HAL_UART_MspInit+0x158>)
 8000ce8:	f000 fe32 	bl	8001950 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000cec:	4b37      	ldr	r3, [pc, #220]	; (8000dcc <HAL_UART_MspInit+0x15c>)
 8000cee:	4a38      	ldr	r2, [pc, #224]	; (8000dd0 <HAL_UART_MspInit+0x160>)
 8000cf0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000cf2:	4b36      	ldr	r3, [pc, #216]	; (8000dcc <HAL_UART_MspInit+0x15c>)
 8000cf4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cf8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cfa:	4b34      	ldr	r3, [pc, #208]	; (8000dcc <HAL_UART_MspInit+0x15c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d00:	4b32      	ldr	r3, [pc, #200]	; (8000dcc <HAL_UART_MspInit+0x15c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d06:	4b31      	ldr	r3, [pc, #196]	; (8000dcc <HAL_UART_MspInit+0x15c>)
 8000d08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d0c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d0e:	4b2f      	ldr	r3, [pc, #188]	; (8000dcc <HAL_UART_MspInit+0x15c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d14:	4b2d      	ldr	r3, [pc, #180]	; (8000dcc <HAL_UART_MspInit+0x15c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000d1a:	4b2c      	ldr	r3, [pc, #176]	; (8000dcc <HAL_UART_MspInit+0x15c>)
 8000d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d20:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d22:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <HAL_UART_MspInit+0x15c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d28:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <HAL_UART_MspInit+0x15c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d2e:	4827      	ldr	r0, [pc, #156]	; (8000dcc <HAL_UART_MspInit+0x15c>)
 8000d30:	f000 fa92 	bl	8001258 <HAL_DMA_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000d3a:	f7ff ff6b 	bl	8000c14 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a22      	ldr	r2, [pc, #136]	; (8000dcc <HAL_UART_MspInit+0x15c>)
 8000d42:	639a      	str	r2, [r3, #56]	; 0x38
 8000d44:	4a21      	ldr	r2, [pc, #132]	; (8000dcc <HAL_UART_MspInit+0x15c>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000d4a:	4b22      	ldr	r3, [pc, #136]	; (8000dd4 <HAL_UART_MspInit+0x164>)
 8000d4c:	4a22      	ldr	r2, [pc, #136]	; (8000dd8 <HAL_UART_MspInit+0x168>)
 8000d4e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000d50:	4b20      	ldr	r3, [pc, #128]	; (8000dd4 <HAL_UART_MspInit+0x164>)
 8000d52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d56:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d58:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <HAL_UART_MspInit+0x164>)
 8000d5a:	2240      	movs	r2, #64	; 0x40
 8000d5c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <HAL_UART_MspInit+0x164>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d64:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <HAL_UART_MspInit+0x164>)
 8000d66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d6a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <HAL_UART_MspInit+0x164>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <HAL_UART_MspInit+0x164>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <HAL_UART_MspInit+0x164>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_UART_MspInit+0x164>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <HAL_UART_MspInit+0x164>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000d8a:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <HAL_UART_MspInit+0x164>)
 8000d8c:	f000 fa64 	bl	8001258 <HAL_DMA_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000d96:	f7ff ff3d 	bl	8000c14 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	; (8000dd4 <HAL_UART_MspInit+0x164>)
 8000d9e:	635a      	str	r2, [r3, #52]	; 0x34
 8000da0:	4a0c      	ldr	r2, [pc, #48]	; (8000dd4 <HAL_UART_MspInit+0x164>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2100      	movs	r1, #0
 8000daa:	2026      	movs	r0, #38	; 0x26
 8000dac:	f000 fa1d 	bl	80011ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000db0:	2026      	movs	r0, #38	; 0x26
 8000db2:	f000 fa36 	bl	8001222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3728      	adds	r7, #40	; 0x28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40004400 	.word	0x40004400
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020000 	.word	0x40020000
 8000dcc:	200000d8 	.word	0x200000d8
 8000dd0:	40026088 	.word	0x40026088
 8000dd4:	20000138 	.word	0x20000138
 8000dd8:	400260a0 	.word	0x400260a0

08000ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <NMI_Handler+0x4>

08000de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <HardFault_Handler+0x4>

08000de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <MemManage_Handler+0x4>

08000dee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <BusFault_Handler+0x4>

08000df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <UsageFault_Handler+0x4>

08000dfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e28:	f000 f8e4 	bl	8000ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <DMA1_Stream5_IRQHandler+0x10>)
 8000e36:	f000 fb4f 	bl	80014d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200000d8 	.word	0x200000d8

08000e44 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <DMA1_Stream6_IRQHandler+0x10>)
 8000e4a:	f000 fb45 	bl	80014d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000138 	.word	0x20000138

08000e58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <USART2_IRQHandler+0x10>)
 8000e5e:	f001 fd33 	bl	80028c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000094 	.word	0x20000094

08000e6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e74:	4a14      	ldr	r2, [pc, #80]	; (8000ec8 <_sbrk+0x5c>)
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <_sbrk+0x60>)
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e80:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <_sbrk+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d102      	bne.n	8000e8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <_sbrk+0x64>)
 8000e8a:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <_sbrk+0x68>)
 8000e8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <_sbrk+0x64>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d207      	bcs.n	8000eac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e9c:	f002 fc7c 	bl	8003798 <__errno>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eaa:	e009      	b.n	8000ec0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <_sbrk+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	4a05      	ldr	r2, [pc, #20]	; (8000ed0 <_sbrk+0x64>)
 8000ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20020000 	.word	0x20020000
 8000ecc:	00000400 	.word	0x00000400
 8000ed0:	20000284 	.word	0x20000284
 8000ed4:	200002a0 	.word	0x200002a0

08000ed8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <SystemInit+0x20>)
 8000ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <SystemInit+0x20>)
 8000ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8000efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f02:	490e      	ldr	r1, [pc, #56]	; (8000f3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f04:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f08:	e002      	b.n	8000f10 <LoopCopyDataInit>

08000f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0e:	3304      	adds	r3, #4

08000f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f14:	d3f9      	bcc.n	8000f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f16:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f18:	4c0b      	ldr	r4, [pc, #44]	; (8000f48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f1c:	e001      	b.n	8000f22 <LoopFillZerobss>

08000f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f20:	3204      	adds	r2, #4

08000f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f24:	d3fb      	bcc.n	8000f1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f26:	f7ff ffd7 	bl	8000ed8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2a:	f002 fc3b 	bl	80037a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2e:	f7ff fb31 	bl	8000594 <main>
  bx  lr    
 8000f32:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8000f34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f3c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000f40:	080042d8 	.word	0x080042d8
  ldr r2, =_sbss
 8000f44:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000f48:	2000029c 	.word	0x2000029c

08000f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <HAL_Init+0x40>)
 8000f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <HAL_Init+0x40>)
 8000f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <HAL_Init+0x40>)
 8000f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f92b 	bl	80011d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f808 	bl	8000f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f84:	f7ff fe4c 	bl	8000c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023c00 	.word	0x40023c00

08000f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_InitTick+0x54>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_InitTick+0x58>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f943 	bl	800123e <HAL_SYSTICK_Config>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00e      	b.n	8000fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b0f      	cmp	r3, #15
 8000fc6:	d80a      	bhi.n	8000fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f000 f90b 	bl	80011ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd4:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <HAL_InitTick+0x5c>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e000      	b.n	8000fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	20000010 	.word	0x20000010
 8000ff0:	2000000c 	.word	0x2000000c

08000ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_IncTick+0x20>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_IncTick+0x24>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4413      	add	r3, r2
 8001004:	4a04      	ldr	r2, [pc, #16]	; (8001018 <HAL_IncTick+0x24>)
 8001006:	6013      	str	r3, [r2, #0]
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000010 	.word	0x20000010
 8001018:	20000288 	.word	0x20000288

0800101c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return uwTick;
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <HAL_GetTick+0x14>)
 8001022:	681b      	ldr	r3, [r3, #0]
}
 8001024:	4618      	mov	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000288 	.word	0x20000288

08001034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001050:	4013      	ands	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800105c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001066:	4a04      	ldr	r2, [pc, #16]	; (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	60d3      	str	r3, [r2, #12]
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <__NVIC_GetPriorityGrouping+0x18>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	f003 0307 	and.w	r3, r3, #7
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	db0b      	blt.n	80010c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	f003 021f 	and.w	r2, r3, #31
 80010b0:	4907      	ldr	r1, [pc, #28]	; (80010d0 <__NVIC_EnableIRQ+0x38>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	095b      	lsrs	r3, r3, #5
 80010b8:	2001      	movs	r0, #1
 80010ba:	fa00 f202 	lsl.w	r2, r0, r2
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000e100 	.word	0xe000e100

080010d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	db0a      	blt.n	80010fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	490c      	ldr	r1, [pc, #48]	; (8001120 <__NVIC_SetPriority+0x4c>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	0112      	lsls	r2, r2, #4
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	440b      	add	r3, r1
 80010f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010fc:	e00a      	b.n	8001114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4908      	ldr	r1, [pc, #32]	; (8001124 <__NVIC_SetPriority+0x50>)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	3b04      	subs	r3, #4
 800110c:	0112      	lsls	r2, r2, #4
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	440b      	add	r3, r1
 8001112:	761a      	strb	r2, [r3, #24]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000e100 	.word	0xe000e100
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001128:	b480      	push	{r7}
 800112a:	b089      	sub	sp, #36	; 0x24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f1c3 0307 	rsb	r3, r3, #7
 8001142:	2b04      	cmp	r3, #4
 8001144:	bf28      	it	cs
 8001146:	2304      	movcs	r3, #4
 8001148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3304      	adds	r3, #4
 800114e:	2b06      	cmp	r3, #6
 8001150:	d902      	bls.n	8001158 <NVIC_EncodePriority+0x30>
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3b03      	subs	r3, #3
 8001156:	e000      	b.n	800115a <NVIC_EncodePriority+0x32>
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	f04f 32ff 	mov.w	r2, #4294967295
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43da      	mvns	r2, r3
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	401a      	ands	r2, r3
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001170:	f04f 31ff 	mov.w	r1, #4294967295
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	fa01 f303 	lsl.w	r3, r1, r3
 800117a:	43d9      	mvns	r1, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	4313      	orrs	r3, r2
         );
}
 8001182:	4618      	mov	r0, r3
 8001184:	3724      	adds	r7, #36	; 0x24
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011a0:	d301      	bcc.n	80011a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00f      	b.n	80011c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a6:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <SysTick_Config+0x40>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ae:	210f      	movs	r1, #15
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f7ff ff8e 	bl	80010d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <SysTick_Config+0x40>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011be:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <SysTick_Config+0x40>)
 80011c0:	2207      	movs	r2, #7
 80011c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	e000e010 	.word	0xe000e010

080011d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff29 	bl	8001034 <__NVIC_SetPriorityGrouping>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b086      	sub	sp, #24
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011fc:	f7ff ff3e 	bl	800107c <__NVIC_GetPriorityGrouping>
 8001200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	68b9      	ldr	r1, [r7, #8]
 8001206:	6978      	ldr	r0, [r7, #20]
 8001208:	f7ff ff8e 	bl	8001128 <NVIC_EncodePriority>
 800120c:	4602      	mov	r2, r0
 800120e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff5d 	bl	80010d4 <__NVIC_SetPriority>
}
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800122c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff31 	bl	8001098 <__NVIC_EnableIRQ>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ffa2 	bl	8001190 <SysTick_Config>
 800124c:	4603      	mov	r3, r0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001264:	f7ff feda 	bl	800101c <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d101      	bne.n	8001274 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e099      	b.n	80013a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2202      	movs	r2, #2
 8001278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0201 	bic.w	r2, r2, #1
 8001292:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001294:	e00f      	b.n	80012b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001296:	f7ff fec1 	bl	800101c <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b05      	cmp	r3, #5
 80012a2:	d908      	bls.n	80012b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2220      	movs	r2, #32
 80012a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2203      	movs	r2, #3
 80012ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e078      	b.n	80013a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1e8      	bne.n	8001296 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	4b38      	ldr	r3, [pc, #224]	; (80013b0 <HAL_DMA_Init+0x158>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a1b      	ldr	r3, [r3, #32]
 8001300:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	4313      	orrs	r3, r2
 8001306:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130c:	2b04      	cmp	r3, #4
 800130e:	d107      	bne.n	8001320 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001318:	4313      	orrs	r3, r2
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	4313      	orrs	r3, r2
 800131e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	f023 0307 	bic.w	r3, r3, #7
 8001336:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	4313      	orrs	r3, r2
 8001340:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001346:	2b04      	cmp	r3, #4
 8001348:	d117      	bne.n	800137a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	4313      	orrs	r3, r2
 8001352:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001358:	2b00      	cmp	r3, #0
 800135a:	d00e      	beq.n	800137a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 fa7b 	bl	8001858 <DMA_CheckFifoParam>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d008      	beq.n	800137a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2240      	movs	r2, #64	; 0x40
 800136c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2201      	movs	r2, #1
 8001372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001376:	2301      	movs	r3, #1
 8001378:	e016      	b.n	80013a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 fa32 	bl	80017ec <DMA_CalcBaseAndBitshift>
 8001388:	4603      	mov	r3, r0
 800138a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001390:	223f      	movs	r2, #63	; 0x3f
 8001392:	409a      	lsls	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2201      	movs	r2, #1
 80013a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	f010803f 	.word	0xf010803f

080013b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013c2:	f7ff fe2b 	bl	800101c <HAL_GetTick>
 80013c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d008      	beq.n	80013e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2280      	movs	r2, #128	; 0x80
 80013d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e052      	b.n	800148c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0216 	bic.w	r2, r2, #22
 80013f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	695a      	ldr	r2, [r3, #20]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001404:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	2b00      	cmp	r3, #0
 800140c:	d103      	bne.n	8001416 <HAL_DMA_Abort+0x62>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001412:	2b00      	cmp	r3, #0
 8001414:	d007      	beq.n	8001426 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0208 	bic.w	r2, r2, #8
 8001424:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 0201 	bic.w	r2, r2, #1
 8001434:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001436:	e013      	b.n	8001460 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001438:	f7ff fdf0 	bl	800101c <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b05      	cmp	r3, #5
 8001444:	d90c      	bls.n	8001460 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2220      	movs	r2, #32
 800144a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2203      	movs	r2, #3
 8001450:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e015      	b.n	800148c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1e4      	bne.n	8001438 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001472:	223f      	movs	r2, #63	; 0x3f
 8001474:	409a      	lsls	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d004      	beq.n	80014b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2280      	movs	r2, #128	; 0x80
 80014ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00c      	b.n	80014cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2205      	movs	r2, #5
 80014b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0201 	bic.w	r2, r2, #1
 80014c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014e4:	4b8e      	ldr	r3, [pc, #568]	; (8001720 <HAL_DMA_IRQHandler+0x248>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a8e      	ldr	r2, [pc, #568]	; (8001724 <HAL_DMA_IRQHandler+0x24c>)
 80014ea:	fba2 2303 	umull	r2, r3, r2, r3
 80014ee:	0a9b      	lsrs	r3, r3, #10
 80014f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001502:	2208      	movs	r2, #8
 8001504:	409a      	lsls	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4013      	ands	r3, r2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d01a      	beq.n	8001544 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d013      	beq.n	8001544 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0204 	bic.w	r2, r2, #4
 800152a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001530:	2208      	movs	r2, #8
 8001532:	409a      	lsls	r2, r3
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800153c:	f043 0201 	orr.w	r2, r3, #1
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001548:	2201      	movs	r2, #1
 800154a:	409a      	lsls	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4013      	ands	r3, r2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d012      	beq.n	800157a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00b      	beq.n	800157a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001566:	2201      	movs	r2, #1
 8001568:	409a      	lsls	r2, r3
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001572:	f043 0202 	orr.w	r2, r3, #2
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157e:	2204      	movs	r2, #4
 8001580:	409a      	lsls	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4013      	ands	r3, r2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d012      	beq.n	80015b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00b      	beq.n	80015b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159c:	2204      	movs	r2, #4
 800159e:	409a      	lsls	r2, r3
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a8:	f043 0204 	orr.w	r2, r3, #4
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b4:	2210      	movs	r2, #16
 80015b6:	409a      	lsls	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d043      	beq.n	8001648 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d03c      	beq.n	8001648 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d2:	2210      	movs	r2, #16
 80015d4:	409a      	lsls	r2, r3
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d018      	beq.n	800161a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d108      	bne.n	8001608 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d024      	beq.n	8001648 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	4798      	blx	r3
 8001606:	e01f      	b.n	8001648 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800160c:	2b00      	cmp	r3, #0
 800160e:	d01b      	beq.n	8001648 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	4798      	blx	r3
 8001618:	e016      	b.n	8001648 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001624:	2b00      	cmp	r3, #0
 8001626:	d107      	bne.n	8001638 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0208 	bic.w	r2, r2, #8
 8001636:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164c:	2220      	movs	r2, #32
 800164e:	409a      	lsls	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4013      	ands	r3, r2
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 808f 	beq.w	8001778 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0310 	and.w	r3, r3, #16
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 8087 	beq.w	8001778 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166e:	2220      	movs	r2, #32
 8001670:	409a      	lsls	r2, r3
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b05      	cmp	r3, #5
 8001680:	d136      	bne.n	80016f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 0216 	bic.w	r2, r2, #22
 8001690:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	695a      	ldr	r2, [r3, #20]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d103      	bne.n	80016b2 <HAL_DMA_IRQHandler+0x1da>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d007      	beq.n	80016c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 0208 	bic.w	r2, r2, #8
 80016c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c6:	223f      	movs	r2, #63	; 0x3f
 80016c8:	409a      	lsls	r2, r3
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2201      	movs	r2, #1
 80016d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d07e      	beq.n	80017e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	4798      	blx	r3
        }
        return;
 80016ee:	e079      	b.n	80017e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d01d      	beq.n	800173a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10d      	bne.n	8001728 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001710:	2b00      	cmp	r3, #0
 8001712:	d031      	beq.n	8001778 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	4798      	blx	r3
 800171c:	e02c      	b.n	8001778 <HAL_DMA_IRQHandler+0x2a0>
 800171e:	bf00      	nop
 8001720:	20000008 	.word	0x20000008
 8001724:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800172c:	2b00      	cmp	r3, #0
 800172e:	d023      	beq.n	8001778 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	4798      	blx	r3
 8001738:	e01e      	b.n	8001778 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10f      	bne.n	8001768 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0210 	bic.w	r2, r2, #16
 8001756:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800177c:	2b00      	cmp	r3, #0
 800177e:	d032      	beq.n	80017e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	2b00      	cmp	r3, #0
 800178a:	d022      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2205      	movs	r2, #5
 8001790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0201 	bic.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	3301      	adds	r3, #1
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d307      	bcc.n	80017c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f2      	bne.n	80017a4 <HAL_DMA_IRQHandler+0x2cc>
 80017be:	e000      	b.n	80017c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80017c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d005      	beq.n	80017e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	4798      	blx	r3
 80017e2:	e000      	b.n	80017e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80017e4:	bf00      	nop
    }
  }
}
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	3b10      	subs	r3, #16
 80017fc:	4a14      	ldr	r2, [pc, #80]	; (8001850 <DMA_CalcBaseAndBitshift+0x64>)
 80017fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001802:	091b      	lsrs	r3, r3, #4
 8001804:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001806:	4a13      	ldr	r2, [pc, #76]	; (8001854 <DMA_CalcBaseAndBitshift+0x68>)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4413      	add	r3, r2
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2b03      	cmp	r3, #3
 8001818:	d909      	bls.n	800182e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001822:	f023 0303 	bic.w	r3, r3, #3
 8001826:	1d1a      	adds	r2, r3, #4
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	659a      	str	r2, [r3, #88]	; 0x58
 800182c:	e007      	b.n	800183e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001836:	f023 0303 	bic.w	r3, r3, #3
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	aaaaaaab 	.word	0xaaaaaaab
 8001854:	0800428c 	.word	0x0800428c

08001858 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001868:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d11f      	bne.n	80018b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	2b03      	cmp	r3, #3
 8001876:	d856      	bhi.n	8001926 <DMA_CheckFifoParam+0xce>
 8001878:	a201      	add	r2, pc, #4	; (adr r2, 8001880 <DMA_CheckFifoParam+0x28>)
 800187a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187e:	bf00      	nop
 8001880:	08001891 	.word	0x08001891
 8001884:	080018a3 	.word	0x080018a3
 8001888:	08001891 	.word	0x08001891
 800188c:	08001927 	.word	0x08001927
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001894:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d046      	beq.n	800192a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018a0:	e043      	b.n	800192a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018aa:	d140      	bne.n	800192e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018b0:	e03d      	b.n	800192e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ba:	d121      	bne.n	8001900 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	2b03      	cmp	r3, #3
 80018c0:	d837      	bhi.n	8001932 <DMA_CheckFifoParam+0xda>
 80018c2:	a201      	add	r2, pc, #4	; (adr r2, 80018c8 <DMA_CheckFifoParam+0x70>)
 80018c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c8:	080018d9 	.word	0x080018d9
 80018cc:	080018df 	.word	0x080018df
 80018d0:	080018d9 	.word	0x080018d9
 80018d4:	080018f1 	.word	0x080018f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	73fb      	strb	r3, [r7, #15]
      break;
 80018dc:	e030      	b.n	8001940 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d025      	beq.n	8001936 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018ee:	e022      	b.n	8001936 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018f8:	d11f      	bne.n	800193a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018fe:	e01c      	b.n	800193a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d903      	bls.n	800190e <DMA_CheckFifoParam+0xb6>
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	2b03      	cmp	r3, #3
 800190a:	d003      	beq.n	8001914 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800190c:	e018      	b.n	8001940 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	73fb      	strb	r3, [r7, #15]
      break;
 8001912:	e015      	b.n	8001940 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00e      	beq.n	800193e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	73fb      	strb	r3, [r7, #15]
      break;
 8001924:	e00b      	b.n	800193e <DMA_CheckFifoParam+0xe6>
      break;
 8001926:	bf00      	nop
 8001928:	e00a      	b.n	8001940 <DMA_CheckFifoParam+0xe8>
      break;
 800192a:	bf00      	nop
 800192c:	e008      	b.n	8001940 <DMA_CheckFifoParam+0xe8>
      break;
 800192e:	bf00      	nop
 8001930:	e006      	b.n	8001940 <DMA_CheckFifoParam+0xe8>
      break;
 8001932:	bf00      	nop
 8001934:	e004      	b.n	8001940 <DMA_CheckFifoParam+0xe8>
      break;
 8001936:	bf00      	nop
 8001938:	e002      	b.n	8001940 <DMA_CheckFifoParam+0xe8>
      break;   
 800193a:	bf00      	nop
 800193c:	e000      	b.n	8001940 <DMA_CheckFifoParam+0xe8>
      break;
 800193e:	bf00      	nop
    }
  } 
  
  return status; 
 8001940:	7bfb      	ldrb	r3, [r7, #15]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop

08001950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001950:	b480      	push	{r7}
 8001952:	b089      	sub	sp, #36	; 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	e159      	b.n	8001c20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800196c:	2201      	movs	r2, #1
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	429a      	cmp	r2, r3
 8001986:	f040 8148 	bne.w	8001c1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	2b01      	cmp	r3, #1
 8001994:	d005      	beq.n	80019a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d130      	bne.n	8001a04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	2203      	movs	r2, #3
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d8:	2201      	movs	r2, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 0201 	and.w	r2, r3, #1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d017      	beq.n	8001a40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d123      	bne.n	8001a94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	08da      	lsrs	r2, r3, #3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3208      	adds	r2, #8
 8001a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	220f      	movs	r2, #15
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	08da      	lsrs	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3208      	adds	r2, #8
 8001a8e:	69b9      	ldr	r1, [r7, #24]
 8001a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0203 	and.w	r2, r3, #3
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 80a2 	beq.w	8001c1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b57      	ldr	r3, [pc, #348]	; (8001c38 <HAL_GPIO_Init+0x2e8>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	4a56      	ldr	r2, [pc, #344]	; (8001c38 <HAL_GPIO_Init+0x2e8>)
 8001ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae6:	4b54      	ldr	r3, [pc, #336]	; (8001c38 <HAL_GPIO_Init+0x2e8>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001af2:	4a52      	ldr	r2, [pc, #328]	; (8001c3c <HAL_GPIO_Init+0x2ec>)
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	089b      	lsrs	r3, r3, #2
 8001af8:	3302      	adds	r3, #2
 8001afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	220f      	movs	r2, #15
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a49      	ldr	r2, [pc, #292]	; (8001c40 <HAL_GPIO_Init+0x2f0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d019      	beq.n	8001b52 <HAL_GPIO_Init+0x202>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a48      	ldr	r2, [pc, #288]	; (8001c44 <HAL_GPIO_Init+0x2f4>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d013      	beq.n	8001b4e <HAL_GPIO_Init+0x1fe>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a47      	ldr	r2, [pc, #284]	; (8001c48 <HAL_GPIO_Init+0x2f8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d00d      	beq.n	8001b4a <HAL_GPIO_Init+0x1fa>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a46      	ldr	r2, [pc, #280]	; (8001c4c <HAL_GPIO_Init+0x2fc>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d007      	beq.n	8001b46 <HAL_GPIO_Init+0x1f6>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a45      	ldr	r2, [pc, #276]	; (8001c50 <HAL_GPIO_Init+0x300>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d101      	bne.n	8001b42 <HAL_GPIO_Init+0x1f2>
 8001b3e:	2304      	movs	r3, #4
 8001b40:	e008      	b.n	8001b54 <HAL_GPIO_Init+0x204>
 8001b42:	2307      	movs	r3, #7
 8001b44:	e006      	b.n	8001b54 <HAL_GPIO_Init+0x204>
 8001b46:	2303      	movs	r3, #3
 8001b48:	e004      	b.n	8001b54 <HAL_GPIO_Init+0x204>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e002      	b.n	8001b54 <HAL_GPIO_Init+0x204>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <HAL_GPIO_Init+0x204>
 8001b52:	2300      	movs	r3, #0
 8001b54:	69fa      	ldr	r2, [r7, #28]
 8001b56:	f002 0203 	and.w	r2, r2, #3
 8001b5a:	0092      	lsls	r2, r2, #2
 8001b5c:	4093      	lsls	r3, r2
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b64:	4935      	ldr	r1, [pc, #212]	; (8001c3c <HAL_GPIO_Init+0x2ec>)
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	089b      	lsrs	r3, r3, #2
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b72:	4b38      	ldr	r3, [pc, #224]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b96:	4a2f      	ldr	r2, [pc, #188]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b9c:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bc0:	4a24      	ldr	r2, [pc, #144]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bc6:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bea:	4a1a      	ldr	r2, [pc, #104]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf0:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c14:	4a0f      	ldr	r2, [pc, #60]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	61fb      	str	r3, [r7, #28]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	2b0f      	cmp	r3, #15
 8001c24:	f67f aea2 	bls.w	800196c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	3724      	adds	r7, #36	; 0x24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40013800 	.word	0x40013800
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40020400 	.word	0x40020400
 8001c48:	40020800 	.word	0x40020800
 8001c4c:	40020c00 	.word	0x40020c00
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40013c00 	.word	0x40013c00

08001c58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	887b      	ldrh	r3, [r7, #2]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c70:	2301      	movs	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	e001      	b.n	8001c7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c76:	2300      	movs	r3, #0
 8001c78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	807b      	strh	r3, [r7, #2]
 8001c94:	4613      	mov	r3, r2
 8001c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c98:	787b      	ldrb	r3, [r7, #1]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c9e:	887a      	ldrh	r2, [r7, #2]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ca4:	e003      	b.n	8001cae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ca6:	887b      	ldrh	r3, [r7, #2]
 8001ca8:	041a      	lsls	r2, r3, #16
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	619a      	str	r2, [r3, #24]
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b085      	sub	sp, #20
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ccc:	887a      	ldrh	r2, [r7, #2]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	041a      	lsls	r2, r3, #16
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	43d9      	mvns	r1, r3
 8001cd8:	887b      	ldrh	r3, [r7, #2]
 8001cda:	400b      	ands	r3, r1
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	619a      	str	r2, [r3, #24]
}
 8001ce2:	bf00      	nop
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e267      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d075      	beq.n	8001dfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d0e:	4b88      	ldr	r3, [pc, #544]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d00c      	beq.n	8001d34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d1a:	4b85      	ldr	r3, [pc, #532]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d112      	bne.n	8001d4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d26:	4b82      	ldr	r3, [pc, #520]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d32:	d10b      	bne.n	8001d4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d34:	4b7e      	ldr	r3, [pc, #504]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d05b      	beq.n	8001df8 <HAL_RCC_OscConfig+0x108>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d157      	bne.n	8001df8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e242      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d54:	d106      	bne.n	8001d64 <HAL_RCC_OscConfig+0x74>
 8001d56:	4b76      	ldr	r3, [pc, #472]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a75      	ldr	r2, [pc, #468]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	e01d      	b.n	8001da0 <HAL_RCC_OscConfig+0xb0>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d6c:	d10c      	bne.n	8001d88 <HAL_RCC_OscConfig+0x98>
 8001d6e:	4b70      	ldr	r3, [pc, #448]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a6f      	ldr	r2, [pc, #444]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	4b6d      	ldr	r3, [pc, #436]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a6c      	ldr	r2, [pc, #432]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	e00b      	b.n	8001da0 <HAL_RCC_OscConfig+0xb0>
 8001d88:	4b69      	ldr	r3, [pc, #420]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a68      	ldr	r2, [pc, #416]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	4b66      	ldr	r3, [pc, #408]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a65      	ldr	r2, [pc, #404]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d013      	beq.n	8001dd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7ff f938 	bl	800101c <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db0:	f7ff f934 	bl	800101c <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b64      	cmp	r3, #100	; 0x64
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e207      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc2:	4b5b      	ldr	r3, [pc, #364]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0xc0>
 8001dce:	e014      	b.n	8001dfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7ff f924 	bl	800101c <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dd8:	f7ff f920 	bl	800101c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b64      	cmp	r3, #100	; 0x64
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e1f3      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dea:	4b51      	ldr	r3, [pc, #324]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0xe8>
 8001df6:	e000      	b.n	8001dfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d063      	beq.n	8001ece <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e06:	4b4a      	ldr	r3, [pc, #296]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00b      	beq.n	8001e2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e12:	4b47      	ldr	r3, [pc, #284]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d11c      	bne.n	8001e58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e1e:	4b44      	ldr	r3, [pc, #272]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d116      	bne.n	8001e58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2a:	4b41      	ldr	r3, [pc, #260]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d005      	beq.n	8001e42 <HAL_RCC_OscConfig+0x152>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d001      	beq.n	8001e42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e1c7      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e42:	4b3b      	ldr	r3, [pc, #236]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4937      	ldr	r1, [pc, #220]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e56:	e03a      	b.n	8001ece <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d020      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e60:	4b34      	ldr	r3, [pc, #208]	; (8001f34 <HAL_RCC_OscConfig+0x244>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e66:	f7ff f8d9 	bl	800101c <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e6e:	f7ff f8d5 	bl	800101c <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e1a8      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e80:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f0      	beq.n	8001e6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8c:	4b28      	ldr	r3, [pc, #160]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4925      	ldr	r1, [pc, #148]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	600b      	str	r3, [r1, #0]
 8001ea0:	e015      	b.n	8001ece <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ea2:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <HAL_RCC_OscConfig+0x244>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea8:	f7ff f8b8 	bl	800101c <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb0:	f7ff f8b4 	bl	800101c <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e187      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d036      	beq.n	8001f48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d016      	beq.n	8001f10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_RCC_OscConfig+0x248>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee8:	f7ff f898 	bl	800101c <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef0:	f7ff f894 	bl	800101c <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e167      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f02:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x200>
 8001f0e:	e01b      	b.n	8001f48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f10:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <HAL_RCC_OscConfig+0x248>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f16:	f7ff f881 	bl	800101c <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1c:	e00e      	b.n	8001f3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f1e:	f7ff f87d 	bl	800101c <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d907      	bls.n	8001f3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e150      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
 8001f30:	40023800 	.word	0x40023800
 8001f34:	42470000 	.word	0x42470000
 8001f38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f3c:	4b88      	ldr	r3, [pc, #544]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1ea      	bne.n	8001f1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 8097 	beq.w	8002084 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5a:	4b81      	ldr	r3, [pc, #516]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10f      	bne.n	8001f86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	4b7d      	ldr	r3, [pc, #500]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	4a7c      	ldr	r2, [pc, #496]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f74:	6413      	str	r3, [r2, #64]	; 0x40
 8001f76:	4b7a      	ldr	r3, [pc, #488]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f82:	2301      	movs	r3, #1
 8001f84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f86:	4b77      	ldr	r3, [pc, #476]	; (8002164 <HAL_RCC_OscConfig+0x474>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d118      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f92:	4b74      	ldr	r3, [pc, #464]	; (8002164 <HAL_RCC_OscConfig+0x474>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a73      	ldr	r2, [pc, #460]	; (8002164 <HAL_RCC_OscConfig+0x474>)
 8001f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9e:	f7ff f83d 	bl	800101c <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa6:	f7ff f839 	bl	800101c <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e10c      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb8:	4b6a      	ldr	r3, [pc, #424]	; (8002164 <HAL_RCC_OscConfig+0x474>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d106      	bne.n	8001fda <HAL_RCC_OscConfig+0x2ea>
 8001fcc:	4b64      	ldr	r3, [pc, #400]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd0:	4a63      	ldr	r2, [pc, #396]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd8:	e01c      	b.n	8002014 <HAL_RCC_OscConfig+0x324>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2b05      	cmp	r3, #5
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x30c>
 8001fe2:	4b5f      	ldr	r3, [pc, #380]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe6:	4a5e      	ldr	r2, [pc, #376]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001fe8:	f043 0304 	orr.w	r3, r3, #4
 8001fec:	6713      	str	r3, [r2, #112]	; 0x70
 8001fee:	4b5c      	ldr	r3, [pc, #368]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff2:	4a5b      	ldr	r2, [pc, #364]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffa:	e00b      	b.n	8002014 <HAL_RCC_OscConfig+0x324>
 8001ffc:	4b58      	ldr	r3, [pc, #352]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002000:	4a57      	ldr	r2, [pc, #348]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8002002:	f023 0301 	bic.w	r3, r3, #1
 8002006:	6713      	str	r3, [r2, #112]	; 0x70
 8002008:	4b55      	ldr	r3, [pc, #340]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 800200a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200c:	4a54      	ldr	r2, [pc, #336]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 800200e:	f023 0304 	bic.w	r3, r3, #4
 8002012:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d015      	beq.n	8002048 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201c:	f7fe fffe 	bl	800101c <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002022:	e00a      	b.n	800203a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002024:	f7fe fffa 	bl	800101c <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002032:	4293      	cmp	r3, r2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e0cb      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203a:	4b49      	ldr	r3, [pc, #292]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 800203c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0ee      	beq.n	8002024 <HAL_RCC_OscConfig+0x334>
 8002046:	e014      	b.n	8002072 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002048:	f7fe ffe8 	bl	800101c <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800204e:	e00a      	b.n	8002066 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002050:	f7fe ffe4 	bl	800101c <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	f241 3288 	movw	r2, #5000	; 0x1388
 800205e:	4293      	cmp	r3, r2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e0b5      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002066:	4b3e      	ldr	r3, [pc, #248]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8002068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1ee      	bne.n	8002050 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002072:	7dfb      	ldrb	r3, [r7, #23]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d105      	bne.n	8002084 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002078:	4b39      	ldr	r3, [pc, #228]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	4a38      	ldr	r2, [pc, #224]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 800207e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002082:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80a1 	beq.w	80021d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800208e:	4b34      	ldr	r3, [pc, #208]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b08      	cmp	r3, #8
 8002098:	d05c      	beq.n	8002154 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d141      	bne.n	8002126 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a2:	4b31      	ldr	r3, [pc, #196]	; (8002168 <HAL_RCC_OscConfig+0x478>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7fe ffb8 	bl	800101c <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b0:	f7fe ffb4 	bl	800101c <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e087      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c2:	4b27      	ldr	r3, [pc, #156]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f0      	bne.n	80020b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69da      	ldr	r2, [r3, #28]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	019b      	lsls	r3, r3, #6
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	085b      	lsrs	r3, r3, #1
 80020e6:	3b01      	subs	r3, #1
 80020e8:	041b      	lsls	r3, r3, #16
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	061b      	lsls	r3, r3, #24
 80020f2:	491b      	ldr	r1, [pc, #108]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f8:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <HAL_RCC_OscConfig+0x478>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fe:	f7fe ff8d 	bl	800101c <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002106:	f7fe ff89 	bl	800101c <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e05c      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x416>
 8002124:	e054      	b.n	80021d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <HAL_RCC_OscConfig+0x478>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7fe ff76 	bl	800101c <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002134:	f7fe ff72 	bl	800101c <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e045      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x444>
 8002152:	e03d      	b.n	80021d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d107      	bne.n	800216c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e038      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
 8002160:	40023800 	.word	0x40023800
 8002164:	40007000 	.word	0x40007000
 8002168:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800216c:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <HAL_RCC_OscConfig+0x4ec>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d028      	beq.n	80021cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002184:	429a      	cmp	r2, r3
 8002186:	d121      	bne.n	80021cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002192:	429a      	cmp	r2, r3
 8002194:	d11a      	bne.n	80021cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800219c:	4013      	ands	r3, r2
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d111      	bne.n	80021cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b2:	085b      	lsrs	r3, r3, #1
 80021b4:	3b01      	subs	r3, #1
 80021b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d107      	bne.n	80021cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800

080021e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0cc      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021f4:	4b68      	ldr	r3, [pc, #416]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d90c      	bls.n	800221c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002202:	4b65      	ldr	r3, [pc, #404]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	4b63      	ldr	r3, [pc, #396]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d001      	beq.n	800221c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e0b8      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d020      	beq.n	800226a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002234:	4b59      	ldr	r3, [pc, #356]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	4a58      	ldr	r2, [pc, #352]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800223e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800224c:	4b53      	ldr	r3, [pc, #332]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	4a52      	ldr	r2, [pc, #328]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002258:	4b50      	ldr	r3, [pc, #320]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	494d      	ldr	r1, [pc, #308]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	4313      	orrs	r3, r2
 8002268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d044      	beq.n	8002300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d107      	bne.n	800228e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227e:	4b47      	ldr	r3, [pc, #284]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d119      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e07f      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d003      	beq.n	800229e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800229a:	2b03      	cmp	r3, #3
 800229c:	d107      	bne.n	80022ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800229e:	4b3f      	ldr	r3, [pc, #252]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e06f      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ae:	4b3b      	ldr	r3, [pc, #236]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e067      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022be:	4b37      	ldr	r3, [pc, #220]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f023 0203 	bic.w	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4934      	ldr	r1, [pc, #208]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d0:	f7fe fea4 	bl	800101c <HAL_GetTick>
 80022d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d6:	e00a      	b.n	80022ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d8:	f7fe fea0 	bl	800101c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e04f      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ee:	4b2b      	ldr	r3, [pc, #172]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 020c 	and.w	r2, r3, #12
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d1eb      	bne.n	80022d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002300:	4b25      	ldr	r3, [pc, #148]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d20c      	bcs.n	8002328 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b22      	ldr	r3, [pc, #136]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002316:	4b20      	ldr	r3, [pc, #128]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d001      	beq.n	8002328 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e032      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002334:	4b19      	ldr	r3, [pc, #100]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4916      	ldr	r1, [pc, #88]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	4313      	orrs	r3, r2
 8002344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d009      	beq.n	8002366 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002352:	4b12      	ldr	r3, [pc, #72]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	490e      	ldr	r1, [pc, #56]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	4313      	orrs	r3, r2
 8002364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002366:	f000 f821 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 800236a:	4602      	mov	r2, r0
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	490a      	ldr	r1, [pc, #40]	; (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002378:	5ccb      	ldrb	r3, [r1, r3]
 800237a:	fa22 f303 	lsr.w	r3, r2, r3
 800237e:	4a09      	ldr	r2, [pc, #36]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe fe04 	bl	8000f94 <HAL_InitTick>

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40023c00 	.word	0x40023c00
 800239c:	40023800 	.word	0x40023800
 80023a0:	08004274 	.word	0x08004274
 80023a4:	20000008 	.word	0x20000008
 80023a8:	2000000c 	.word	0x2000000c

080023ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023b0:	b094      	sub	sp, #80	; 0x50
 80023b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	647b      	str	r3, [r7, #68]	; 0x44
 80023b8:	2300      	movs	r3, #0
 80023ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023bc:	2300      	movs	r3, #0
 80023be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023c4:	4b79      	ldr	r3, [pc, #484]	; (80025ac <HAL_RCC_GetSysClockFreq+0x200>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 030c 	and.w	r3, r3, #12
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d00d      	beq.n	80023ec <HAL_RCC_GetSysClockFreq+0x40>
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	f200 80e1 	bhi.w	8002598 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d002      	beq.n	80023e0 <HAL_RCC_GetSysClockFreq+0x34>
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d003      	beq.n	80023e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80023de:	e0db      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023e0:	4b73      	ldr	r3, [pc, #460]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80023e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80023e4:	e0db      	b.n	800259e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023e6:	4b73      	ldr	r3, [pc, #460]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80023e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023ea:	e0d8      	b.n	800259e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023ec:	4b6f      	ldr	r3, [pc, #444]	; (80025ac <HAL_RCC_GetSysClockFreq+0x200>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023f6:	4b6d      	ldr	r3, [pc, #436]	; (80025ac <HAL_RCC_GetSysClockFreq+0x200>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d063      	beq.n	80024ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002402:	4b6a      	ldr	r3, [pc, #424]	; (80025ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	099b      	lsrs	r3, r3, #6
 8002408:	2200      	movs	r2, #0
 800240a:	63bb      	str	r3, [r7, #56]	; 0x38
 800240c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800240e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002414:	633b      	str	r3, [r7, #48]	; 0x30
 8002416:	2300      	movs	r3, #0
 8002418:	637b      	str	r3, [r7, #52]	; 0x34
 800241a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800241e:	4622      	mov	r2, r4
 8002420:	462b      	mov	r3, r5
 8002422:	f04f 0000 	mov.w	r0, #0
 8002426:	f04f 0100 	mov.w	r1, #0
 800242a:	0159      	lsls	r1, r3, #5
 800242c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002430:	0150      	lsls	r0, r2, #5
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4621      	mov	r1, r4
 8002438:	1a51      	subs	r1, r2, r1
 800243a:	6139      	str	r1, [r7, #16]
 800243c:	4629      	mov	r1, r5
 800243e:	eb63 0301 	sbc.w	r3, r3, r1
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	f04f 0300 	mov.w	r3, #0
 800244c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002450:	4659      	mov	r1, fp
 8002452:	018b      	lsls	r3, r1, #6
 8002454:	4651      	mov	r1, sl
 8002456:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800245a:	4651      	mov	r1, sl
 800245c:	018a      	lsls	r2, r1, #6
 800245e:	4651      	mov	r1, sl
 8002460:	ebb2 0801 	subs.w	r8, r2, r1
 8002464:	4659      	mov	r1, fp
 8002466:	eb63 0901 	sbc.w	r9, r3, r1
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002476:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800247a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800247e:	4690      	mov	r8, r2
 8002480:	4699      	mov	r9, r3
 8002482:	4623      	mov	r3, r4
 8002484:	eb18 0303 	adds.w	r3, r8, r3
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	462b      	mov	r3, r5
 800248c:	eb49 0303 	adc.w	r3, r9, r3
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	f04f 0300 	mov.w	r3, #0
 800249a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800249e:	4629      	mov	r1, r5
 80024a0:	024b      	lsls	r3, r1, #9
 80024a2:	4621      	mov	r1, r4
 80024a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024a8:	4621      	mov	r1, r4
 80024aa:	024a      	lsls	r2, r1, #9
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024b2:	2200      	movs	r2, #0
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80024b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024bc:	f7fd fee8 	bl	8000290 <__aeabi_uldivmod>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	4613      	mov	r3, r2
 80024c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024c8:	e058      	b.n	800257c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ca:	4b38      	ldr	r3, [pc, #224]	; (80025ac <HAL_RCC_GetSysClockFreq+0x200>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	099b      	lsrs	r3, r3, #6
 80024d0:	2200      	movs	r2, #0
 80024d2:	4618      	mov	r0, r3
 80024d4:	4611      	mov	r1, r2
 80024d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024da:	623b      	str	r3, [r7, #32]
 80024dc:	2300      	movs	r3, #0
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
 80024e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024e4:	4642      	mov	r2, r8
 80024e6:	464b      	mov	r3, r9
 80024e8:	f04f 0000 	mov.w	r0, #0
 80024ec:	f04f 0100 	mov.w	r1, #0
 80024f0:	0159      	lsls	r1, r3, #5
 80024f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024f6:	0150      	lsls	r0, r2, #5
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4641      	mov	r1, r8
 80024fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002502:	4649      	mov	r1, r9
 8002504:	eb63 0b01 	sbc.w	fp, r3, r1
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002514:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002518:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800251c:	ebb2 040a 	subs.w	r4, r2, sl
 8002520:	eb63 050b 	sbc.w	r5, r3, fp
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	00eb      	lsls	r3, r5, #3
 800252e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002532:	00e2      	lsls	r2, r4, #3
 8002534:	4614      	mov	r4, r2
 8002536:	461d      	mov	r5, r3
 8002538:	4643      	mov	r3, r8
 800253a:	18e3      	adds	r3, r4, r3
 800253c:	603b      	str	r3, [r7, #0]
 800253e:	464b      	mov	r3, r9
 8002540:	eb45 0303 	adc.w	r3, r5, r3
 8002544:	607b      	str	r3, [r7, #4]
 8002546:	f04f 0200 	mov.w	r2, #0
 800254a:	f04f 0300 	mov.w	r3, #0
 800254e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002552:	4629      	mov	r1, r5
 8002554:	028b      	lsls	r3, r1, #10
 8002556:	4621      	mov	r1, r4
 8002558:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800255c:	4621      	mov	r1, r4
 800255e:	028a      	lsls	r2, r1, #10
 8002560:	4610      	mov	r0, r2
 8002562:	4619      	mov	r1, r3
 8002564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002566:	2200      	movs	r2, #0
 8002568:	61bb      	str	r3, [r7, #24]
 800256a:	61fa      	str	r2, [r7, #28]
 800256c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002570:	f7fd fe8e 	bl	8000290 <__aeabi_uldivmod>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4613      	mov	r3, r2
 800257a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_RCC_GetSysClockFreq+0x200>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	0c1b      	lsrs	r3, r3, #16
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	3301      	adds	r3, #1
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800258c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800258e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002590:	fbb2 f3f3 	udiv	r3, r2, r3
 8002594:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002596:	e002      	b.n	800259e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800259a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800259c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800259e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3750      	adds	r7, #80	; 0x50
 80025a4:	46bd      	mov	sp, r7
 80025a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025aa:	bf00      	nop
 80025ac:	40023800 	.word	0x40023800
 80025b0:	00f42400 	.word	0x00f42400
 80025b4:	007a1200 	.word	0x007a1200

080025b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <HAL_RCC_GetHCLKFreq+0x14>)
 80025be:	681b      	ldr	r3, [r3, #0]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	20000008 	.word	0x20000008

080025d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025d4:	f7ff fff0 	bl	80025b8 <HAL_RCC_GetHCLKFreq>
 80025d8:	4602      	mov	r2, r0
 80025da:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	0a9b      	lsrs	r3, r3, #10
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	4903      	ldr	r1, [pc, #12]	; (80025f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025e6:	5ccb      	ldrb	r3, [r1, r3]
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40023800 	.word	0x40023800
 80025f4:	08004284 	.word	0x08004284

080025f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025fc:	f7ff ffdc 	bl	80025b8 <HAL_RCC_GetHCLKFreq>
 8002600:	4602      	mov	r2, r0
 8002602:	4b05      	ldr	r3, [pc, #20]	; (8002618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	0b5b      	lsrs	r3, r3, #13
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	4903      	ldr	r1, [pc, #12]	; (800261c <HAL_RCC_GetPCLK2Freq+0x24>)
 800260e:	5ccb      	ldrb	r3, [r1, r3]
 8002610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002614:	4618      	mov	r0, r3
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40023800 	.word	0x40023800
 800261c:	08004284 	.word	0x08004284

08002620 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e03f      	b.n	80026b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d106      	bne.n	800264c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7fe fb12 	bl	8000c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2224      	movs	r2, #36	; 0x24
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002662:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 fe23 	bl	80032b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002678:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	695a      	ldr	r2, [r3, #20]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002688:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002698:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b08a      	sub	sp, #40	; 0x28
 80026be:	af02      	add	r7, sp, #8
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	603b      	str	r3, [r7, #0]
 80026c6:	4613      	mov	r3, r2
 80026c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b20      	cmp	r3, #32
 80026d8:	d17c      	bne.n	80027d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <HAL_UART_Transmit+0x2c>
 80026e0:	88fb      	ldrh	r3, [r7, #6]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e075      	b.n	80027d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_UART_Transmit+0x3e>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e06e      	b.n	80027d6 <HAL_UART_Transmit+0x11c>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2221      	movs	r2, #33	; 0x21
 800270a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800270e:	f7fe fc85 	bl	800101c <HAL_GetTick>
 8002712:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	88fa      	ldrh	r2, [r7, #6]
 8002718:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	88fa      	ldrh	r2, [r7, #6]
 800271e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002728:	d108      	bne.n	800273c <HAL_UART_Transmit+0x82>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d104      	bne.n	800273c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	61bb      	str	r3, [r7, #24]
 800273a:	e003      	b.n	8002744 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002740:	2300      	movs	r3, #0
 8002742:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800274c:	e02a      	b.n	80027a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2200      	movs	r2, #0
 8002756:	2180      	movs	r1, #128	; 0x80
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 fb63 	bl	8002e24 <UART_WaitOnFlagUntilTimeout>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e036      	b.n	80027d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10b      	bne.n	8002786 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	461a      	mov	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800277c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	3302      	adds	r3, #2
 8002782:	61bb      	str	r3, [r7, #24]
 8002784:	e007      	b.n	8002796 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	781a      	ldrb	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	3301      	adds	r3, #1
 8002794:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800279a:	b29b      	uxth	r3, r3
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1cf      	bne.n	800274e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2200      	movs	r2, #0
 80027b6:	2140      	movs	r1, #64	; 0x40
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 fb33 	bl	8002e24 <UART_WaitOnFlagUntilTimeout>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e006      	b.n	80027d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	e000      	b.n	80027d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80027d4:	2302      	movs	r3, #2
  }
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3720      	adds	r7, #32
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80027de:	b480      	push	{r7}
 80027e0:	b085      	sub	sp, #20
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	4613      	mov	r3, r2
 80027ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	d130      	bne.n	800285a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <HAL_UART_Transmit_IT+0x26>
 80027fe:	88fb      	ldrh	r3, [r7, #6]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e029      	b.n	800285c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <HAL_UART_Transmit_IT+0x38>
 8002812:	2302      	movs	r3, #2
 8002814:	e022      	b.n	800285c <HAL_UART_Transmit_IT+0x7e>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	88fa      	ldrh	r2, [r7, #6]
 8002828:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	88fa      	ldrh	r2, [r7, #6]
 800282e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2221      	movs	r2, #33	; 0x21
 800283a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002854:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	e000      	b.n	800285c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800285a:	2302      	movs	r3, #2
  }
}
 800285c:	4618      	mov	r0, r3
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	4613      	mov	r3, r2
 8002874:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b20      	cmp	r3, #32
 8002880:	d11d      	bne.n	80028be <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <HAL_UART_Receive_IT+0x26>
 8002888:	88fb      	ldrh	r3, [r7, #6]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e016      	b.n	80028c0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_UART_Receive_IT+0x38>
 800289c:	2302      	movs	r3, #2
 800289e:	e00f      	b.n	80028c0 <HAL_UART_Receive_IT+0x58>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80028ae:	88fb      	ldrh	r3, [r7, #6]
 80028b0:	461a      	mov	r2, r3
 80028b2:	68b9      	ldr	r1, [r7, #8]
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 fb23 	bl	8002f00 <UART_Start_Receive_IT>
 80028ba:	4603      	mov	r3, r0
 80028bc:	e000      	b.n	80028c0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80028be:	2302      	movs	r3, #2
  }
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b0ba      	sub	sp, #232	; 0xe8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80028fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002906:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10f      	bne.n	800292e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800290e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b00      	cmp	r3, #0
 8002918:	d009      	beq.n	800292e <HAL_UART_IRQHandler+0x66>
 800291a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 fc07 	bl	800313a <UART_Receive_IT>
      return;
 800292c:	e256      	b.n	8002ddc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800292e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 80de 	beq.w	8002af4 <HAL_UART_IRQHandler+0x22c>
 8002938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d106      	bne.n	8002952 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002948:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 80d1 	beq.w	8002af4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00b      	beq.n	8002976 <HAL_UART_IRQHandler+0xae>
 800295e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002966:	2b00      	cmp	r3, #0
 8002968:	d005      	beq.n	8002976 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f043 0201 	orr.w	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00b      	beq.n	800299a <HAL_UART_IRQHandler+0xd2>
 8002982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	f043 0202 	orr.w	r2, r3, #2
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800299a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00b      	beq.n	80029be <HAL_UART_IRQHandler+0xf6>
 80029a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d005      	beq.n	80029be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f043 0204 	orr.w	r2, r3, #4
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80029be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d011      	beq.n	80029ee <HAL_UART_IRQHandler+0x126>
 80029ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ce:	f003 0320 	and.w	r3, r3, #32
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d105      	bne.n	80029e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80029d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d005      	beq.n	80029ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f043 0208 	orr.w	r2, r3, #8
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 81ed 	beq.w	8002dd2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d008      	beq.n	8002a16 <HAL_UART_IRQHandler+0x14e>
 8002a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fb92 	bl	800313a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a20:	2b40      	cmp	r3, #64	; 0x40
 8002a22:	bf0c      	ite	eq
 8002a24:	2301      	moveq	r3, #1
 8002a26:	2300      	movne	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d103      	bne.n	8002a42 <HAL_UART_IRQHandler+0x17a>
 8002a3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d04f      	beq.n	8002ae2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 fa9a 	bl	8002f7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a52:	2b40      	cmp	r3, #64	; 0x40
 8002a54:	d141      	bne.n	8002ada <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	3314      	adds	r3, #20
 8002a5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a64:	e853 3f00 	ldrex	r3, [r3]
 8002a68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	3314      	adds	r3, #20
 8002a7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a92:	e841 2300 	strex	r3, r2, [r1]
 8002a96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1d9      	bne.n	8002a56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d013      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aae:	4a7d      	ldr	r2, [pc, #500]	; (8002ca4 <HAL_UART_IRQHandler+0x3dc>)
 8002ab0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe fcec 	bl	8001494 <HAL_DMA_Abort_IT>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d016      	beq.n	8002af0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002acc:	4610      	mov	r0, r2
 8002ace:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad0:	e00e      	b.n	8002af0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f990 	bl	8002df8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad8:	e00a      	b.n	8002af0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f98c 	bl	8002df8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae0:	e006      	b.n	8002af0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f988 	bl	8002df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002aee:	e170      	b.n	8002dd2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af0:	bf00      	nop
    return;
 8002af2:	e16e      	b.n	8002dd2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	f040 814a 	bne.w	8002d92 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b02:	f003 0310 	and.w	r3, r3, #16
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 8143 	beq.w	8002d92 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 813c 	beq.w	8002d92 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60bb      	str	r3, [r7, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3a:	2b40      	cmp	r3, #64	; 0x40
 8002b3c:	f040 80b4 	bne.w	8002ca8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 8140 	beq.w	8002dd6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	f080 8139 	bcs.w	8002dd6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b76:	f000 8088 	beq.w	8002c8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	330c      	adds	r3, #12
 8002b80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b88:	e853 3f00 	ldrex	r3, [r3]
 8002b8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	330c      	adds	r3, #12
 8002ba2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002ba6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002baa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002bb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002bb6:	e841 2300 	strex	r3, r2, [r1]
 8002bba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1d9      	bne.n	8002b7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3314      	adds	r3, #20
 8002bcc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bd0:	e853 3f00 	ldrex	r3, [r3]
 8002bd4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002bd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bd8:	f023 0301 	bic.w	r3, r3, #1
 8002bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3314      	adds	r3, #20
 8002be6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002bea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002bee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002bf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002bf6:	e841 2300 	strex	r3, r2, [r1]
 8002bfa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002bfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1e1      	bne.n	8002bc6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	3314      	adds	r3, #20
 8002c08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c0c:	e853 3f00 	ldrex	r3, [r3]
 8002c10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002c12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3314      	adds	r3, #20
 8002c22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c2e:	e841 2300 	strex	r3, r2, [r1]
 8002c32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1e3      	bne.n	8002c02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	330c      	adds	r3, #12
 8002c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c52:	e853 3f00 	ldrex	r3, [r3]
 8002c56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c5a:	f023 0310 	bic.w	r3, r3, #16
 8002c5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	330c      	adds	r3, #12
 8002c68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002c6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c74:	e841 2300 	strex	r3, r2, [r1]
 8002c78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1e3      	bne.n	8002c48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7fe fb95 	bl	80013b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	4619      	mov	r1, r3
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f8b6 	bl	8002e0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ca0:	e099      	b.n	8002dd6 <HAL_UART_IRQHandler+0x50e>
 8002ca2:	bf00      	nop
 8002ca4:	08003043 	.word	0x08003043
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 808b 	beq.w	8002dda <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002cc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 8086 	beq.w	8002dda <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	330c      	adds	r3, #12
 8002cd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd8:	e853 3f00 	ldrex	r3, [r3]
 8002cdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ce4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	330c      	adds	r3, #12
 8002cee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002cf2:	647a      	str	r2, [r7, #68]	; 0x44
 8002cf4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002cf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cfa:	e841 2300 	strex	r3, r2, [r1]
 8002cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1e3      	bne.n	8002cce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	3314      	adds	r3, #20
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	e853 3f00 	ldrex	r3, [r3]
 8002d14:	623b      	str	r3, [r7, #32]
   return(result);
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	f023 0301 	bic.w	r3, r3, #1
 8002d1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3314      	adds	r3, #20
 8002d26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d2a:	633a      	str	r2, [r7, #48]	; 0x30
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d32:	e841 2300 	strex	r3, r2, [r1]
 8002d36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1e3      	bne.n	8002d06 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2220      	movs	r2, #32
 8002d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	330c      	adds	r3, #12
 8002d52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	e853 3f00 	ldrex	r3, [r3]
 8002d5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f023 0310 	bic.w	r3, r3, #16
 8002d62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	330c      	adds	r3, #12
 8002d6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002d70:	61fa      	str	r2, [r7, #28]
 8002d72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d74:	69b9      	ldr	r1, [r7, #24]
 8002d76:	69fa      	ldr	r2, [r7, #28]
 8002d78:	e841 2300 	strex	r3, r2, [r1]
 8002d7c:	617b      	str	r3, [r7, #20]
   return(result);
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1e3      	bne.n	8002d4c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d88:	4619      	mov	r1, r3
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f83e 	bl	8002e0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d90:	e023      	b.n	8002dda <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d009      	beq.n	8002db2 <HAL_UART_IRQHandler+0x4ea>
 8002d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f95d 	bl	800306a <UART_Transmit_IT>
    return;
 8002db0:	e014      	b.n	8002ddc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00e      	beq.n	8002ddc <HAL_UART_IRQHandler+0x514>
 8002dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d008      	beq.n	8002ddc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f99d 	bl	800310a <UART_EndTransmit_IT>
    return;
 8002dd0:	e004      	b.n	8002ddc <HAL_UART_IRQHandler+0x514>
    return;
 8002dd2:	bf00      	nop
 8002dd4:	e002      	b.n	8002ddc <HAL_UART_IRQHandler+0x514>
      return;
 8002dd6:	bf00      	nop
 8002dd8:	e000      	b.n	8002ddc <HAL_UART_IRQHandler+0x514>
      return;
 8002dda:	bf00      	nop
  }
}
 8002ddc:	37e8      	adds	r7, #232	; 0xe8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop

08002de4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b090      	sub	sp, #64	; 0x40
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	603b      	str	r3, [r7, #0]
 8002e30:	4613      	mov	r3, r2
 8002e32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e34:	e050      	b.n	8002ed8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3c:	d04c      	beq.n	8002ed8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d007      	beq.n	8002e54 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e44:	f7fe f8ea 	bl	800101c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d241      	bcs.n	8002ed8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	330c      	adds	r3, #12
 8002e5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5e:	e853 3f00 	ldrex	r3, [r3]
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	330c      	adds	r3, #12
 8002e72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e74:	637a      	str	r2, [r7, #52]	; 0x34
 8002e76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e7c:	e841 2300 	strex	r3, r2, [r1]
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1e5      	bne.n	8002e54 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	3314      	adds	r3, #20
 8002e8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	e853 3f00 	ldrex	r3, [r3]
 8002e96:	613b      	str	r3, [r7, #16]
   return(result);
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f023 0301 	bic.w	r3, r3, #1
 8002e9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	3314      	adds	r3, #20
 8002ea6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ea8:	623a      	str	r2, [r7, #32]
 8002eaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eac:	69f9      	ldr	r1, [r7, #28]
 8002eae:	6a3a      	ldr	r2, [r7, #32]
 8002eb0:	e841 2300 	strex	r3, r2, [r1]
 8002eb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1e5      	bne.n	8002e88 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e00f      	b.n	8002ef8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	461a      	mov	r2, r3
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d09f      	beq.n	8002e36 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3740      	adds	r7, #64	; 0x40
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2222      	movs	r2, #34	; 0x22
 8002f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d007      	beq.n	8002f4e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f4c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695a      	ldr	r2, [r3, #20]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f042 0201 	orr.w	r2, r2, #1
 8002f5c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 0220 	orr.w	r2, r2, #32
 8002f6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b095      	sub	sp, #84	; 0x54
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	330c      	adds	r3, #12
 8002f8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8e:	e853 3f00 	ldrex	r3, [r3]
 8002f92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	330c      	adds	r3, #12
 8002fa2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fa4:	643a      	str	r2, [r7, #64]	; 0x40
 8002fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002faa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fac:	e841 2300 	strex	r3, r2, [r1]
 8002fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1e5      	bne.n	8002f84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3314      	adds	r3, #20
 8002fbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	e853 3f00 	ldrex	r3, [r3]
 8002fc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f023 0301 	bic.w	r3, r3, #1
 8002fce:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	3314      	adds	r3, #20
 8002fd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fe0:	e841 2300 	strex	r3, r2, [r1]
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e5      	bne.n	8002fb8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d119      	bne.n	8003028 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	330c      	adds	r3, #12
 8002ffa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	e853 3f00 	ldrex	r3, [r3]
 8003002:	60bb      	str	r3, [r7, #8]
   return(result);
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f023 0310 	bic.w	r3, r3, #16
 800300a:	647b      	str	r3, [r7, #68]	; 0x44
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	330c      	adds	r3, #12
 8003012:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003014:	61ba      	str	r2, [r7, #24]
 8003016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003018:	6979      	ldr	r1, [r7, #20]
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	e841 2300 	strex	r3, r2, [r1]
 8003020:	613b      	str	r3, [r7, #16]
   return(result);
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1e5      	bne.n	8002ff4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003036:	bf00      	nop
 8003038:	3754      	adds	r7, #84	; 0x54
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f7ff fecb 	bl	8002df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003062:	bf00      	nop
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800306a:	b480      	push	{r7}
 800306c:	b085      	sub	sp, #20
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b21      	cmp	r3, #33	; 0x21
 800307c:	d13e      	bne.n	80030fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003086:	d114      	bne.n	80030b2 <UART_Transmit_IT+0x48>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d110      	bne.n	80030b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	1c9a      	adds	r2, r3, #2
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	621a      	str	r2, [r3, #32]
 80030b0:	e008      	b.n	80030c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	1c59      	adds	r1, r3, #1
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6211      	str	r1, [r2, #32]
 80030bc:	781a      	ldrb	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	4619      	mov	r1, r3
 80030d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10f      	bne.n	80030f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	e000      	b.n	80030fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80030fc:	2302      	movs	r3, #2
  }
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b082      	sub	sp, #8
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68da      	ldr	r2, [r3, #12]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003120:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7ff fe5a 	bl	8002de4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b08c      	sub	sp, #48	; 0x30
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b22      	cmp	r3, #34	; 0x22
 800314c:	f040 80ab 	bne.w	80032a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003158:	d117      	bne.n	800318a <UART_Receive_IT+0x50>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d113      	bne.n	800318a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003162:	2300      	movs	r3, #0
 8003164:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	b29b      	uxth	r3, r3
 8003174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003178:	b29a      	uxth	r2, r3
 800317a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003182:	1c9a      	adds	r2, r3, #2
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	629a      	str	r2, [r3, #40]	; 0x28
 8003188:	e026      	b.n	80031d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003190:	2300      	movs	r3, #0
 8003192:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800319c:	d007      	beq.n	80031ae <UART_Receive_IT+0x74>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10a      	bne.n	80031bc <UART_Receive_IT+0x82>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d106      	bne.n	80031bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	e008      	b.n	80031ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031dc:	b29b      	uxth	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	4619      	mov	r1, r3
 80031e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d15a      	bne.n	80032a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0220 	bic.w	r2, r2, #32
 80031fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800320a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695a      	ldr	r2, [r3, #20]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0201 	bic.w	r2, r2, #1
 800321a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003228:	2b01      	cmp	r3, #1
 800322a:	d135      	bne.n	8003298 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	330c      	adds	r3, #12
 8003238:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	e853 3f00 	ldrex	r3, [r3]
 8003240:	613b      	str	r3, [r7, #16]
   return(result);
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f023 0310 	bic.w	r3, r3, #16
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	330c      	adds	r3, #12
 8003250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003252:	623a      	str	r2, [r7, #32]
 8003254:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003256:	69f9      	ldr	r1, [r7, #28]
 8003258:	6a3a      	ldr	r2, [r7, #32]
 800325a:	e841 2300 	strex	r3, r2, [r1]
 800325e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1e5      	bne.n	8003232 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b10      	cmp	r3, #16
 8003272:	d10a      	bne.n	800328a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800328e:	4619      	mov	r1, r3
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7ff fdbb 	bl	8002e0c <HAL_UARTEx_RxEventCallback>
 8003296:	e002      	b.n	800329e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7fd fc8f 	bl	8000bbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	e002      	b.n	80032a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	e000      	b.n	80032a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80032a6:	2302      	movs	r3, #2
  }
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3730      	adds	r7, #48	; 0x30
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032b4:	b0c0      	sub	sp, #256	; 0x100
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80032c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032cc:	68d9      	ldr	r1, [r3, #12]
 80032ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	ea40 0301 	orr.w	r3, r0, r1
 80032d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	431a      	orrs	r2, r3
 80032e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	431a      	orrs	r2, r3
 80032f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003308:	f021 010c 	bic.w	r1, r1, #12
 800330c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003316:	430b      	orrs	r3, r1
 8003318:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800331a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332a:	6999      	ldr	r1, [r3, #24]
 800332c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	ea40 0301 	orr.w	r3, r0, r1
 8003336:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	4b8f      	ldr	r3, [pc, #572]	; (800357c <UART_SetConfig+0x2cc>)
 8003340:	429a      	cmp	r2, r3
 8003342:	d005      	beq.n	8003350 <UART_SetConfig+0xa0>
 8003344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	4b8d      	ldr	r3, [pc, #564]	; (8003580 <UART_SetConfig+0x2d0>)
 800334c:	429a      	cmp	r2, r3
 800334e:	d104      	bne.n	800335a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003350:	f7ff f952 	bl	80025f8 <HAL_RCC_GetPCLK2Freq>
 8003354:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003358:	e003      	b.n	8003362 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800335a:	f7ff f939 	bl	80025d0 <HAL_RCC_GetPCLK1Freq>
 800335e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800336c:	f040 810c 	bne.w	8003588 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003374:	2200      	movs	r2, #0
 8003376:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800337a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800337e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003382:	4622      	mov	r2, r4
 8003384:	462b      	mov	r3, r5
 8003386:	1891      	adds	r1, r2, r2
 8003388:	65b9      	str	r1, [r7, #88]	; 0x58
 800338a:	415b      	adcs	r3, r3
 800338c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800338e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003392:	4621      	mov	r1, r4
 8003394:	eb12 0801 	adds.w	r8, r2, r1
 8003398:	4629      	mov	r1, r5
 800339a:	eb43 0901 	adc.w	r9, r3, r1
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033b2:	4690      	mov	r8, r2
 80033b4:	4699      	mov	r9, r3
 80033b6:	4623      	mov	r3, r4
 80033b8:	eb18 0303 	adds.w	r3, r8, r3
 80033bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033c0:	462b      	mov	r3, r5
 80033c2:	eb49 0303 	adc.w	r3, r9, r3
 80033c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80033ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80033d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80033da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80033de:	460b      	mov	r3, r1
 80033e0:	18db      	adds	r3, r3, r3
 80033e2:	653b      	str	r3, [r7, #80]	; 0x50
 80033e4:	4613      	mov	r3, r2
 80033e6:	eb42 0303 	adc.w	r3, r2, r3
 80033ea:	657b      	str	r3, [r7, #84]	; 0x54
 80033ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80033f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80033f4:	f7fc ff4c 	bl	8000290 <__aeabi_uldivmod>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4b61      	ldr	r3, [pc, #388]	; (8003584 <UART_SetConfig+0x2d4>)
 80033fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003402:	095b      	lsrs	r3, r3, #5
 8003404:	011c      	lsls	r4, r3, #4
 8003406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800340a:	2200      	movs	r2, #0
 800340c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003410:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003414:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003418:	4642      	mov	r2, r8
 800341a:	464b      	mov	r3, r9
 800341c:	1891      	adds	r1, r2, r2
 800341e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003420:	415b      	adcs	r3, r3
 8003422:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003424:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003428:	4641      	mov	r1, r8
 800342a:	eb12 0a01 	adds.w	sl, r2, r1
 800342e:	4649      	mov	r1, r9
 8003430:	eb43 0b01 	adc.w	fp, r3, r1
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003440:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003444:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003448:	4692      	mov	sl, r2
 800344a:	469b      	mov	fp, r3
 800344c:	4643      	mov	r3, r8
 800344e:	eb1a 0303 	adds.w	r3, sl, r3
 8003452:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003456:	464b      	mov	r3, r9
 8003458:	eb4b 0303 	adc.w	r3, fp, r3
 800345c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800346c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003470:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003474:	460b      	mov	r3, r1
 8003476:	18db      	adds	r3, r3, r3
 8003478:	643b      	str	r3, [r7, #64]	; 0x40
 800347a:	4613      	mov	r3, r2
 800347c:	eb42 0303 	adc.w	r3, r2, r3
 8003480:	647b      	str	r3, [r7, #68]	; 0x44
 8003482:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003486:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800348a:	f7fc ff01 	bl	8000290 <__aeabi_uldivmod>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4611      	mov	r1, r2
 8003494:	4b3b      	ldr	r3, [pc, #236]	; (8003584 <UART_SetConfig+0x2d4>)
 8003496:	fba3 2301 	umull	r2, r3, r3, r1
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	2264      	movs	r2, #100	; 0x64
 800349e:	fb02 f303 	mul.w	r3, r2, r3
 80034a2:	1acb      	subs	r3, r1, r3
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80034aa:	4b36      	ldr	r3, [pc, #216]	; (8003584 <UART_SetConfig+0x2d4>)
 80034ac:	fba3 2302 	umull	r2, r3, r3, r2
 80034b0:	095b      	lsrs	r3, r3, #5
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034b8:	441c      	add	r4, r3
 80034ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034be:	2200      	movs	r2, #0
 80034c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80034c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80034cc:	4642      	mov	r2, r8
 80034ce:	464b      	mov	r3, r9
 80034d0:	1891      	adds	r1, r2, r2
 80034d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80034d4:	415b      	adcs	r3, r3
 80034d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034dc:	4641      	mov	r1, r8
 80034de:	1851      	adds	r1, r2, r1
 80034e0:	6339      	str	r1, [r7, #48]	; 0x30
 80034e2:	4649      	mov	r1, r9
 80034e4:	414b      	adcs	r3, r1
 80034e6:	637b      	str	r3, [r7, #52]	; 0x34
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80034f4:	4659      	mov	r1, fp
 80034f6:	00cb      	lsls	r3, r1, #3
 80034f8:	4651      	mov	r1, sl
 80034fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034fe:	4651      	mov	r1, sl
 8003500:	00ca      	lsls	r2, r1, #3
 8003502:	4610      	mov	r0, r2
 8003504:	4619      	mov	r1, r3
 8003506:	4603      	mov	r3, r0
 8003508:	4642      	mov	r2, r8
 800350a:	189b      	adds	r3, r3, r2
 800350c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003510:	464b      	mov	r3, r9
 8003512:	460a      	mov	r2, r1
 8003514:	eb42 0303 	adc.w	r3, r2, r3
 8003518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800351c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003528:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800352c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003530:	460b      	mov	r3, r1
 8003532:	18db      	adds	r3, r3, r3
 8003534:	62bb      	str	r3, [r7, #40]	; 0x28
 8003536:	4613      	mov	r3, r2
 8003538:	eb42 0303 	adc.w	r3, r2, r3
 800353c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800353e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003542:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003546:	f7fc fea3 	bl	8000290 <__aeabi_uldivmod>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	4b0d      	ldr	r3, [pc, #52]	; (8003584 <UART_SetConfig+0x2d4>)
 8003550:	fba3 1302 	umull	r1, r3, r3, r2
 8003554:	095b      	lsrs	r3, r3, #5
 8003556:	2164      	movs	r1, #100	; 0x64
 8003558:	fb01 f303 	mul.w	r3, r1, r3
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	3332      	adds	r3, #50	; 0x32
 8003562:	4a08      	ldr	r2, [pc, #32]	; (8003584 <UART_SetConfig+0x2d4>)
 8003564:	fba2 2303 	umull	r2, r3, r2, r3
 8003568:	095b      	lsrs	r3, r3, #5
 800356a:	f003 0207 	and.w	r2, r3, #7
 800356e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4422      	add	r2, r4
 8003576:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003578:	e105      	b.n	8003786 <UART_SetConfig+0x4d6>
 800357a:	bf00      	nop
 800357c:	40011000 	.word	0x40011000
 8003580:	40011400 	.word	0x40011400
 8003584:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800358c:	2200      	movs	r2, #0
 800358e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003592:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003596:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800359a:	4642      	mov	r2, r8
 800359c:	464b      	mov	r3, r9
 800359e:	1891      	adds	r1, r2, r2
 80035a0:	6239      	str	r1, [r7, #32]
 80035a2:	415b      	adcs	r3, r3
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
 80035a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035aa:	4641      	mov	r1, r8
 80035ac:	1854      	adds	r4, r2, r1
 80035ae:	4649      	mov	r1, r9
 80035b0:	eb43 0501 	adc.w	r5, r3, r1
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	00eb      	lsls	r3, r5, #3
 80035be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035c2:	00e2      	lsls	r2, r4, #3
 80035c4:	4614      	mov	r4, r2
 80035c6:	461d      	mov	r5, r3
 80035c8:	4643      	mov	r3, r8
 80035ca:	18e3      	adds	r3, r4, r3
 80035cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80035d0:	464b      	mov	r3, r9
 80035d2:	eb45 0303 	adc.w	r3, r5, r3
 80035d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	f04f 0300 	mov.w	r3, #0
 80035f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80035f6:	4629      	mov	r1, r5
 80035f8:	008b      	lsls	r3, r1, #2
 80035fa:	4621      	mov	r1, r4
 80035fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003600:	4621      	mov	r1, r4
 8003602:	008a      	lsls	r2, r1, #2
 8003604:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003608:	f7fc fe42 	bl	8000290 <__aeabi_uldivmod>
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4b60      	ldr	r3, [pc, #384]	; (8003794 <UART_SetConfig+0x4e4>)
 8003612:	fba3 2302 	umull	r2, r3, r3, r2
 8003616:	095b      	lsrs	r3, r3, #5
 8003618:	011c      	lsls	r4, r3, #4
 800361a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800361e:	2200      	movs	r2, #0
 8003620:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003624:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003628:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800362c:	4642      	mov	r2, r8
 800362e:	464b      	mov	r3, r9
 8003630:	1891      	adds	r1, r2, r2
 8003632:	61b9      	str	r1, [r7, #24]
 8003634:	415b      	adcs	r3, r3
 8003636:	61fb      	str	r3, [r7, #28]
 8003638:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800363c:	4641      	mov	r1, r8
 800363e:	1851      	adds	r1, r2, r1
 8003640:	6139      	str	r1, [r7, #16]
 8003642:	4649      	mov	r1, r9
 8003644:	414b      	adcs	r3, r1
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003654:	4659      	mov	r1, fp
 8003656:	00cb      	lsls	r3, r1, #3
 8003658:	4651      	mov	r1, sl
 800365a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800365e:	4651      	mov	r1, sl
 8003660:	00ca      	lsls	r2, r1, #3
 8003662:	4610      	mov	r0, r2
 8003664:	4619      	mov	r1, r3
 8003666:	4603      	mov	r3, r0
 8003668:	4642      	mov	r2, r8
 800366a:	189b      	adds	r3, r3, r2
 800366c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003670:	464b      	mov	r3, r9
 8003672:	460a      	mov	r2, r1
 8003674:	eb42 0303 	adc.w	r3, r2, r3
 8003678:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800367c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	67bb      	str	r3, [r7, #120]	; 0x78
 8003686:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003694:	4649      	mov	r1, r9
 8003696:	008b      	lsls	r3, r1, #2
 8003698:	4641      	mov	r1, r8
 800369a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800369e:	4641      	mov	r1, r8
 80036a0:	008a      	lsls	r2, r1, #2
 80036a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80036a6:	f7fc fdf3 	bl	8000290 <__aeabi_uldivmod>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4b39      	ldr	r3, [pc, #228]	; (8003794 <UART_SetConfig+0x4e4>)
 80036b0:	fba3 1302 	umull	r1, r3, r3, r2
 80036b4:	095b      	lsrs	r3, r3, #5
 80036b6:	2164      	movs	r1, #100	; 0x64
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	3332      	adds	r3, #50	; 0x32
 80036c2:	4a34      	ldr	r2, [pc, #208]	; (8003794 <UART_SetConfig+0x4e4>)
 80036c4:	fba2 2303 	umull	r2, r3, r2, r3
 80036c8:	095b      	lsrs	r3, r3, #5
 80036ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036ce:	441c      	add	r4, r3
 80036d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036d4:	2200      	movs	r2, #0
 80036d6:	673b      	str	r3, [r7, #112]	; 0x70
 80036d8:	677a      	str	r2, [r7, #116]	; 0x74
 80036da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036de:	4642      	mov	r2, r8
 80036e0:	464b      	mov	r3, r9
 80036e2:	1891      	adds	r1, r2, r2
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	415b      	adcs	r3, r3
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036ee:	4641      	mov	r1, r8
 80036f0:	1851      	adds	r1, r2, r1
 80036f2:	6039      	str	r1, [r7, #0]
 80036f4:	4649      	mov	r1, r9
 80036f6:	414b      	adcs	r3, r1
 80036f8:	607b      	str	r3, [r7, #4]
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	f04f 0300 	mov.w	r3, #0
 8003702:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003706:	4659      	mov	r1, fp
 8003708:	00cb      	lsls	r3, r1, #3
 800370a:	4651      	mov	r1, sl
 800370c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003710:	4651      	mov	r1, sl
 8003712:	00ca      	lsls	r2, r1, #3
 8003714:	4610      	mov	r0, r2
 8003716:	4619      	mov	r1, r3
 8003718:	4603      	mov	r3, r0
 800371a:	4642      	mov	r2, r8
 800371c:	189b      	adds	r3, r3, r2
 800371e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003720:	464b      	mov	r3, r9
 8003722:	460a      	mov	r2, r1
 8003724:	eb42 0303 	adc.w	r3, r2, r3
 8003728:	66fb      	str	r3, [r7, #108]	; 0x6c
 800372a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	663b      	str	r3, [r7, #96]	; 0x60
 8003734:	667a      	str	r2, [r7, #100]	; 0x64
 8003736:	f04f 0200 	mov.w	r2, #0
 800373a:	f04f 0300 	mov.w	r3, #0
 800373e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003742:	4649      	mov	r1, r9
 8003744:	008b      	lsls	r3, r1, #2
 8003746:	4641      	mov	r1, r8
 8003748:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800374c:	4641      	mov	r1, r8
 800374e:	008a      	lsls	r2, r1, #2
 8003750:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003754:	f7fc fd9c 	bl	8000290 <__aeabi_uldivmod>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <UART_SetConfig+0x4e4>)
 800375e:	fba3 1302 	umull	r1, r3, r3, r2
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	2164      	movs	r1, #100	; 0x64
 8003766:	fb01 f303 	mul.w	r3, r1, r3
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	3332      	adds	r3, #50	; 0x32
 8003770:	4a08      	ldr	r2, [pc, #32]	; (8003794 <UART_SetConfig+0x4e4>)
 8003772:	fba2 2303 	umull	r2, r3, r2, r3
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	f003 020f 	and.w	r2, r3, #15
 800377c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4422      	add	r2, r4
 8003784:	609a      	str	r2, [r3, #8]
}
 8003786:	bf00      	nop
 8003788:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800378c:	46bd      	mov	sp, r7
 800378e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003792:	bf00      	nop
 8003794:	51eb851f 	.word	0x51eb851f

08003798 <__errno>:
 8003798:	4b01      	ldr	r3, [pc, #4]	; (80037a0 <__errno+0x8>)
 800379a:	6818      	ldr	r0, [r3, #0]
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20000014 	.word	0x20000014

080037a4 <__libc_init_array>:
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	4d0d      	ldr	r5, [pc, #52]	; (80037dc <__libc_init_array+0x38>)
 80037a8:	4c0d      	ldr	r4, [pc, #52]	; (80037e0 <__libc_init_array+0x3c>)
 80037aa:	1b64      	subs	r4, r4, r5
 80037ac:	10a4      	asrs	r4, r4, #2
 80037ae:	2600      	movs	r6, #0
 80037b0:	42a6      	cmp	r6, r4
 80037b2:	d109      	bne.n	80037c8 <__libc_init_array+0x24>
 80037b4:	4d0b      	ldr	r5, [pc, #44]	; (80037e4 <__libc_init_array+0x40>)
 80037b6:	4c0c      	ldr	r4, [pc, #48]	; (80037e8 <__libc_init_array+0x44>)
 80037b8:	f000 fc8e 	bl	80040d8 <_init>
 80037bc:	1b64      	subs	r4, r4, r5
 80037be:	10a4      	asrs	r4, r4, #2
 80037c0:	2600      	movs	r6, #0
 80037c2:	42a6      	cmp	r6, r4
 80037c4:	d105      	bne.n	80037d2 <__libc_init_array+0x2e>
 80037c6:	bd70      	pop	{r4, r5, r6, pc}
 80037c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037cc:	4798      	blx	r3
 80037ce:	3601      	adds	r6, #1
 80037d0:	e7ee      	b.n	80037b0 <__libc_init_array+0xc>
 80037d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d6:	4798      	blx	r3
 80037d8:	3601      	adds	r6, #1
 80037da:	e7f2      	b.n	80037c2 <__libc_init_array+0x1e>
 80037dc:	080042d0 	.word	0x080042d0
 80037e0:	080042d0 	.word	0x080042d0
 80037e4:	080042d0 	.word	0x080042d0
 80037e8:	080042d4 	.word	0x080042d4

080037ec <memset>:
 80037ec:	4402      	add	r2, r0
 80037ee:	4603      	mov	r3, r0
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d100      	bne.n	80037f6 <memset+0xa>
 80037f4:	4770      	bx	lr
 80037f6:	f803 1b01 	strb.w	r1, [r3], #1
 80037fa:	e7f9      	b.n	80037f0 <memset+0x4>

080037fc <siprintf>:
 80037fc:	b40e      	push	{r1, r2, r3}
 80037fe:	b500      	push	{lr}
 8003800:	b09c      	sub	sp, #112	; 0x70
 8003802:	ab1d      	add	r3, sp, #116	; 0x74
 8003804:	9002      	str	r0, [sp, #8]
 8003806:	9006      	str	r0, [sp, #24]
 8003808:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800380c:	4809      	ldr	r0, [pc, #36]	; (8003834 <siprintf+0x38>)
 800380e:	9107      	str	r1, [sp, #28]
 8003810:	9104      	str	r1, [sp, #16]
 8003812:	4909      	ldr	r1, [pc, #36]	; (8003838 <siprintf+0x3c>)
 8003814:	f853 2b04 	ldr.w	r2, [r3], #4
 8003818:	9105      	str	r1, [sp, #20]
 800381a:	6800      	ldr	r0, [r0, #0]
 800381c:	9301      	str	r3, [sp, #4]
 800381e:	a902      	add	r1, sp, #8
 8003820:	f000 f868 	bl	80038f4 <_svfiprintf_r>
 8003824:	9b02      	ldr	r3, [sp, #8]
 8003826:	2200      	movs	r2, #0
 8003828:	701a      	strb	r2, [r3, #0]
 800382a:	b01c      	add	sp, #112	; 0x70
 800382c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003830:	b003      	add	sp, #12
 8003832:	4770      	bx	lr
 8003834:	20000014 	.word	0x20000014
 8003838:	ffff0208 	.word	0xffff0208

0800383c <__ssputs_r>:
 800383c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003840:	688e      	ldr	r6, [r1, #8]
 8003842:	429e      	cmp	r6, r3
 8003844:	4682      	mov	sl, r0
 8003846:	460c      	mov	r4, r1
 8003848:	4690      	mov	r8, r2
 800384a:	461f      	mov	r7, r3
 800384c:	d838      	bhi.n	80038c0 <__ssputs_r+0x84>
 800384e:	898a      	ldrh	r2, [r1, #12]
 8003850:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003854:	d032      	beq.n	80038bc <__ssputs_r+0x80>
 8003856:	6825      	ldr	r5, [r4, #0]
 8003858:	6909      	ldr	r1, [r1, #16]
 800385a:	eba5 0901 	sub.w	r9, r5, r1
 800385e:	6965      	ldr	r5, [r4, #20]
 8003860:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003864:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003868:	3301      	adds	r3, #1
 800386a:	444b      	add	r3, r9
 800386c:	106d      	asrs	r5, r5, #1
 800386e:	429d      	cmp	r5, r3
 8003870:	bf38      	it	cc
 8003872:	461d      	movcc	r5, r3
 8003874:	0553      	lsls	r3, r2, #21
 8003876:	d531      	bpl.n	80038dc <__ssputs_r+0xa0>
 8003878:	4629      	mov	r1, r5
 800387a:	f000 fb63 	bl	8003f44 <_malloc_r>
 800387e:	4606      	mov	r6, r0
 8003880:	b950      	cbnz	r0, 8003898 <__ssputs_r+0x5c>
 8003882:	230c      	movs	r3, #12
 8003884:	f8ca 3000 	str.w	r3, [sl]
 8003888:	89a3      	ldrh	r3, [r4, #12]
 800388a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800388e:	81a3      	strh	r3, [r4, #12]
 8003890:	f04f 30ff 	mov.w	r0, #4294967295
 8003894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003898:	6921      	ldr	r1, [r4, #16]
 800389a:	464a      	mov	r2, r9
 800389c:	f000 fabe 	bl	8003e1c <memcpy>
 80038a0:	89a3      	ldrh	r3, [r4, #12]
 80038a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038aa:	81a3      	strh	r3, [r4, #12]
 80038ac:	6126      	str	r6, [r4, #16]
 80038ae:	6165      	str	r5, [r4, #20]
 80038b0:	444e      	add	r6, r9
 80038b2:	eba5 0509 	sub.w	r5, r5, r9
 80038b6:	6026      	str	r6, [r4, #0]
 80038b8:	60a5      	str	r5, [r4, #8]
 80038ba:	463e      	mov	r6, r7
 80038bc:	42be      	cmp	r6, r7
 80038be:	d900      	bls.n	80038c2 <__ssputs_r+0x86>
 80038c0:	463e      	mov	r6, r7
 80038c2:	6820      	ldr	r0, [r4, #0]
 80038c4:	4632      	mov	r2, r6
 80038c6:	4641      	mov	r1, r8
 80038c8:	f000 fab6 	bl	8003e38 <memmove>
 80038cc:	68a3      	ldr	r3, [r4, #8]
 80038ce:	1b9b      	subs	r3, r3, r6
 80038d0:	60a3      	str	r3, [r4, #8]
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	4433      	add	r3, r6
 80038d6:	6023      	str	r3, [r4, #0]
 80038d8:	2000      	movs	r0, #0
 80038da:	e7db      	b.n	8003894 <__ssputs_r+0x58>
 80038dc:	462a      	mov	r2, r5
 80038de:	f000 fba5 	bl	800402c <_realloc_r>
 80038e2:	4606      	mov	r6, r0
 80038e4:	2800      	cmp	r0, #0
 80038e6:	d1e1      	bne.n	80038ac <__ssputs_r+0x70>
 80038e8:	6921      	ldr	r1, [r4, #16]
 80038ea:	4650      	mov	r0, sl
 80038ec:	f000 fabe 	bl	8003e6c <_free_r>
 80038f0:	e7c7      	b.n	8003882 <__ssputs_r+0x46>
	...

080038f4 <_svfiprintf_r>:
 80038f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f8:	4698      	mov	r8, r3
 80038fa:	898b      	ldrh	r3, [r1, #12]
 80038fc:	061b      	lsls	r3, r3, #24
 80038fe:	b09d      	sub	sp, #116	; 0x74
 8003900:	4607      	mov	r7, r0
 8003902:	460d      	mov	r5, r1
 8003904:	4614      	mov	r4, r2
 8003906:	d50e      	bpl.n	8003926 <_svfiprintf_r+0x32>
 8003908:	690b      	ldr	r3, [r1, #16]
 800390a:	b963      	cbnz	r3, 8003926 <_svfiprintf_r+0x32>
 800390c:	2140      	movs	r1, #64	; 0x40
 800390e:	f000 fb19 	bl	8003f44 <_malloc_r>
 8003912:	6028      	str	r0, [r5, #0]
 8003914:	6128      	str	r0, [r5, #16]
 8003916:	b920      	cbnz	r0, 8003922 <_svfiprintf_r+0x2e>
 8003918:	230c      	movs	r3, #12
 800391a:	603b      	str	r3, [r7, #0]
 800391c:	f04f 30ff 	mov.w	r0, #4294967295
 8003920:	e0d1      	b.n	8003ac6 <_svfiprintf_r+0x1d2>
 8003922:	2340      	movs	r3, #64	; 0x40
 8003924:	616b      	str	r3, [r5, #20]
 8003926:	2300      	movs	r3, #0
 8003928:	9309      	str	r3, [sp, #36]	; 0x24
 800392a:	2320      	movs	r3, #32
 800392c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003930:	f8cd 800c 	str.w	r8, [sp, #12]
 8003934:	2330      	movs	r3, #48	; 0x30
 8003936:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003ae0 <_svfiprintf_r+0x1ec>
 800393a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800393e:	f04f 0901 	mov.w	r9, #1
 8003942:	4623      	mov	r3, r4
 8003944:	469a      	mov	sl, r3
 8003946:	f813 2b01 	ldrb.w	r2, [r3], #1
 800394a:	b10a      	cbz	r2, 8003950 <_svfiprintf_r+0x5c>
 800394c:	2a25      	cmp	r2, #37	; 0x25
 800394e:	d1f9      	bne.n	8003944 <_svfiprintf_r+0x50>
 8003950:	ebba 0b04 	subs.w	fp, sl, r4
 8003954:	d00b      	beq.n	800396e <_svfiprintf_r+0x7a>
 8003956:	465b      	mov	r3, fp
 8003958:	4622      	mov	r2, r4
 800395a:	4629      	mov	r1, r5
 800395c:	4638      	mov	r0, r7
 800395e:	f7ff ff6d 	bl	800383c <__ssputs_r>
 8003962:	3001      	adds	r0, #1
 8003964:	f000 80aa 	beq.w	8003abc <_svfiprintf_r+0x1c8>
 8003968:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800396a:	445a      	add	r2, fp
 800396c:	9209      	str	r2, [sp, #36]	; 0x24
 800396e:	f89a 3000 	ldrb.w	r3, [sl]
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 80a2 	beq.w	8003abc <_svfiprintf_r+0x1c8>
 8003978:	2300      	movs	r3, #0
 800397a:	f04f 32ff 	mov.w	r2, #4294967295
 800397e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003982:	f10a 0a01 	add.w	sl, sl, #1
 8003986:	9304      	str	r3, [sp, #16]
 8003988:	9307      	str	r3, [sp, #28]
 800398a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800398e:	931a      	str	r3, [sp, #104]	; 0x68
 8003990:	4654      	mov	r4, sl
 8003992:	2205      	movs	r2, #5
 8003994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003998:	4851      	ldr	r0, [pc, #324]	; (8003ae0 <_svfiprintf_r+0x1ec>)
 800399a:	f7fc fc29 	bl	80001f0 <memchr>
 800399e:	9a04      	ldr	r2, [sp, #16]
 80039a0:	b9d8      	cbnz	r0, 80039da <_svfiprintf_r+0xe6>
 80039a2:	06d0      	lsls	r0, r2, #27
 80039a4:	bf44      	itt	mi
 80039a6:	2320      	movmi	r3, #32
 80039a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039ac:	0711      	lsls	r1, r2, #28
 80039ae:	bf44      	itt	mi
 80039b0:	232b      	movmi	r3, #43	; 0x2b
 80039b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039b6:	f89a 3000 	ldrb.w	r3, [sl]
 80039ba:	2b2a      	cmp	r3, #42	; 0x2a
 80039bc:	d015      	beq.n	80039ea <_svfiprintf_r+0xf6>
 80039be:	9a07      	ldr	r2, [sp, #28]
 80039c0:	4654      	mov	r4, sl
 80039c2:	2000      	movs	r0, #0
 80039c4:	f04f 0c0a 	mov.w	ip, #10
 80039c8:	4621      	mov	r1, r4
 80039ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039ce:	3b30      	subs	r3, #48	; 0x30
 80039d0:	2b09      	cmp	r3, #9
 80039d2:	d94e      	bls.n	8003a72 <_svfiprintf_r+0x17e>
 80039d4:	b1b0      	cbz	r0, 8003a04 <_svfiprintf_r+0x110>
 80039d6:	9207      	str	r2, [sp, #28]
 80039d8:	e014      	b.n	8003a04 <_svfiprintf_r+0x110>
 80039da:	eba0 0308 	sub.w	r3, r0, r8
 80039de:	fa09 f303 	lsl.w	r3, r9, r3
 80039e2:	4313      	orrs	r3, r2
 80039e4:	9304      	str	r3, [sp, #16]
 80039e6:	46a2      	mov	sl, r4
 80039e8:	e7d2      	b.n	8003990 <_svfiprintf_r+0x9c>
 80039ea:	9b03      	ldr	r3, [sp, #12]
 80039ec:	1d19      	adds	r1, r3, #4
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	9103      	str	r1, [sp, #12]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	bfbb      	ittet	lt
 80039f6:	425b      	neglt	r3, r3
 80039f8:	f042 0202 	orrlt.w	r2, r2, #2
 80039fc:	9307      	strge	r3, [sp, #28]
 80039fe:	9307      	strlt	r3, [sp, #28]
 8003a00:	bfb8      	it	lt
 8003a02:	9204      	strlt	r2, [sp, #16]
 8003a04:	7823      	ldrb	r3, [r4, #0]
 8003a06:	2b2e      	cmp	r3, #46	; 0x2e
 8003a08:	d10c      	bne.n	8003a24 <_svfiprintf_r+0x130>
 8003a0a:	7863      	ldrb	r3, [r4, #1]
 8003a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8003a0e:	d135      	bne.n	8003a7c <_svfiprintf_r+0x188>
 8003a10:	9b03      	ldr	r3, [sp, #12]
 8003a12:	1d1a      	adds	r2, r3, #4
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	9203      	str	r2, [sp, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bfb8      	it	lt
 8003a1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a20:	3402      	adds	r4, #2
 8003a22:	9305      	str	r3, [sp, #20]
 8003a24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003af0 <_svfiprintf_r+0x1fc>
 8003a28:	7821      	ldrb	r1, [r4, #0]
 8003a2a:	2203      	movs	r2, #3
 8003a2c:	4650      	mov	r0, sl
 8003a2e:	f7fc fbdf 	bl	80001f0 <memchr>
 8003a32:	b140      	cbz	r0, 8003a46 <_svfiprintf_r+0x152>
 8003a34:	2340      	movs	r3, #64	; 0x40
 8003a36:	eba0 000a 	sub.w	r0, r0, sl
 8003a3a:	fa03 f000 	lsl.w	r0, r3, r0
 8003a3e:	9b04      	ldr	r3, [sp, #16]
 8003a40:	4303      	orrs	r3, r0
 8003a42:	3401      	adds	r4, #1
 8003a44:	9304      	str	r3, [sp, #16]
 8003a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a4a:	4826      	ldr	r0, [pc, #152]	; (8003ae4 <_svfiprintf_r+0x1f0>)
 8003a4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a50:	2206      	movs	r2, #6
 8003a52:	f7fc fbcd 	bl	80001f0 <memchr>
 8003a56:	2800      	cmp	r0, #0
 8003a58:	d038      	beq.n	8003acc <_svfiprintf_r+0x1d8>
 8003a5a:	4b23      	ldr	r3, [pc, #140]	; (8003ae8 <_svfiprintf_r+0x1f4>)
 8003a5c:	bb1b      	cbnz	r3, 8003aa6 <_svfiprintf_r+0x1b2>
 8003a5e:	9b03      	ldr	r3, [sp, #12]
 8003a60:	3307      	adds	r3, #7
 8003a62:	f023 0307 	bic.w	r3, r3, #7
 8003a66:	3308      	adds	r3, #8
 8003a68:	9303      	str	r3, [sp, #12]
 8003a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a6c:	4433      	add	r3, r6
 8003a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a70:	e767      	b.n	8003942 <_svfiprintf_r+0x4e>
 8003a72:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a76:	460c      	mov	r4, r1
 8003a78:	2001      	movs	r0, #1
 8003a7a:	e7a5      	b.n	80039c8 <_svfiprintf_r+0xd4>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	3401      	adds	r4, #1
 8003a80:	9305      	str	r3, [sp, #20]
 8003a82:	4619      	mov	r1, r3
 8003a84:	f04f 0c0a 	mov.w	ip, #10
 8003a88:	4620      	mov	r0, r4
 8003a8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a8e:	3a30      	subs	r2, #48	; 0x30
 8003a90:	2a09      	cmp	r2, #9
 8003a92:	d903      	bls.n	8003a9c <_svfiprintf_r+0x1a8>
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0c5      	beq.n	8003a24 <_svfiprintf_r+0x130>
 8003a98:	9105      	str	r1, [sp, #20]
 8003a9a:	e7c3      	b.n	8003a24 <_svfiprintf_r+0x130>
 8003a9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003aa0:	4604      	mov	r4, r0
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e7f0      	b.n	8003a88 <_svfiprintf_r+0x194>
 8003aa6:	ab03      	add	r3, sp, #12
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	462a      	mov	r2, r5
 8003aac:	4b0f      	ldr	r3, [pc, #60]	; (8003aec <_svfiprintf_r+0x1f8>)
 8003aae:	a904      	add	r1, sp, #16
 8003ab0:	4638      	mov	r0, r7
 8003ab2:	f3af 8000 	nop.w
 8003ab6:	1c42      	adds	r2, r0, #1
 8003ab8:	4606      	mov	r6, r0
 8003aba:	d1d6      	bne.n	8003a6a <_svfiprintf_r+0x176>
 8003abc:	89ab      	ldrh	r3, [r5, #12]
 8003abe:	065b      	lsls	r3, r3, #25
 8003ac0:	f53f af2c 	bmi.w	800391c <_svfiprintf_r+0x28>
 8003ac4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ac6:	b01d      	add	sp, #116	; 0x74
 8003ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003acc:	ab03      	add	r3, sp, #12
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	462a      	mov	r2, r5
 8003ad2:	4b06      	ldr	r3, [pc, #24]	; (8003aec <_svfiprintf_r+0x1f8>)
 8003ad4:	a904      	add	r1, sp, #16
 8003ad6:	4638      	mov	r0, r7
 8003ad8:	f000 f87a 	bl	8003bd0 <_printf_i>
 8003adc:	e7eb      	b.n	8003ab6 <_svfiprintf_r+0x1c2>
 8003ade:	bf00      	nop
 8003ae0:	08004294 	.word	0x08004294
 8003ae4:	0800429e 	.word	0x0800429e
 8003ae8:	00000000 	.word	0x00000000
 8003aec:	0800383d 	.word	0x0800383d
 8003af0:	0800429a 	.word	0x0800429a

08003af4 <_printf_common>:
 8003af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003af8:	4616      	mov	r6, r2
 8003afa:	4699      	mov	r9, r3
 8003afc:	688a      	ldr	r2, [r1, #8]
 8003afe:	690b      	ldr	r3, [r1, #16]
 8003b00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b04:	4293      	cmp	r3, r2
 8003b06:	bfb8      	it	lt
 8003b08:	4613      	movlt	r3, r2
 8003b0a:	6033      	str	r3, [r6, #0]
 8003b0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b10:	4607      	mov	r7, r0
 8003b12:	460c      	mov	r4, r1
 8003b14:	b10a      	cbz	r2, 8003b1a <_printf_common+0x26>
 8003b16:	3301      	adds	r3, #1
 8003b18:	6033      	str	r3, [r6, #0]
 8003b1a:	6823      	ldr	r3, [r4, #0]
 8003b1c:	0699      	lsls	r1, r3, #26
 8003b1e:	bf42      	ittt	mi
 8003b20:	6833      	ldrmi	r3, [r6, #0]
 8003b22:	3302      	addmi	r3, #2
 8003b24:	6033      	strmi	r3, [r6, #0]
 8003b26:	6825      	ldr	r5, [r4, #0]
 8003b28:	f015 0506 	ands.w	r5, r5, #6
 8003b2c:	d106      	bne.n	8003b3c <_printf_common+0x48>
 8003b2e:	f104 0a19 	add.w	sl, r4, #25
 8003b32:	68e3      	ldr	r3, [r4, #12]
 8003b34:	6832      	ldr	r2, [r6, #0]
 8003b36:	1a9b      	subs	r3, r3, r2
 8003b38:	42ab      	cmp	r3, r5
 8003b3a:	dc26      	bgt.n	8003b8a <_printf_common+0x96>
 8003b3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b40:	1e13      	subs	r3, r2, #0
 8003b42:	6822      	ldr	r2, [r4, #0]
 8003b44:	bf18      	it	ne
 8003b46:	2301      	movne	r3, #1
 8003b48:	0692      	lsls	r2, r2, #26
 8003b4a:	d42b      	bmi.n	8003ba4 <_printf_common+0xb0>
 8003b4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b50:	4649      	mov	r1, r9
 8003b52:	4638      	mov	r0, r7
 8003b54:	47c0      	blx	r8
 8003b56:	3001      	adds	r0, #1
 8003b58:	d01e      	beq.n	8003b98 <_printf_common+0xa4>
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	68e5      	ldr	r5, [r4, #12]
 8003b5e:	6832      	ldr	r2, [r6, #0]
 8003b60:	f003 0306 	and.w	r3, r3, #6
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	bf08      	it	eq
 8003b68:	1aad      	subeq	r5, r5, r2
 8003b6a:	68a3      	ldr	r3, [r4, #8]
 8003b6c:	6922      	ldr	r2, [r4, #16]
 8003b6e:	bf0c      	ite	eq
 8003b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b74:	2500      	movne	r5, #0
 8003b76:	4293      	cmp	r3, r2
 8003b78:	bfc4      	itt	gt
 8003b7a:	1a9b      	subgt	r3, r3, r2
 8003b7c:	18ed      	addgt	r5, r5, r3
 8003b7e:	2600      	movs	r6, #0
 8003b80:	341a      	adds	r4, #26
 8003b82:	42b5      	cmp	r5, r6
 8003b84:	d11a      	bne.n	8003bbc <_printf_common+0xc8>
 8003b86:	2000      	movs	r0, #0
 8003b88:	e008      	b.n	8003b9c <_printf_common+0xa8>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	4652      	mov	r2, sl
 8003b8e:	4649      	mov	r1, r9
 8003b90:	4638      	mov	r0, r7
 8003b92:	47c0      	blx	r8
 8003b94:	3001      	adds	r0, #1
 8003b96:	d103      	bne.n	8003ba0 <_printf_common+0xac>
 8003b98:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba0:	3501      	adds	r5, #1
 8003ba2:	e7c6      	b.n	8003b32 <_printf_common+0x3e>
 8003ba4:	18e1      	adds	r1, r4, r3
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	2030      	movs	r0, #48	; 0x30
 8003baa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bae:	4422      	add	r2, r4
 8003bb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bb8:	3302      	adds	r3, #2
 8003bba:	e7c7      	b.n	8003b4c <_printf_common+0x58>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	4622      	mov	r2, r4
 8003bc0:	4649      	mov	r1, r9
 8003bc2:	4638      	mov	r0, r7
 8003bc4:	47c0      	blx	r8
 8003bc6:	3001      	adds	r0, #1
 8003bc8:	d0e6      	beq.n	8003b98 <_printf_common+0xa4>
 8003bca:	3601      	adds	r6, #1
 8003bcc:	e7d9      	b.n	8003b82 <_printf_common+0x8e>
	...

08003bd0 <_printf_i>:
 8003bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bd4:	7e0f      	ldrb	r7, [r1, #24]
 8003bd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bd8:	2f78      	cmp	r7, #120	; 0x78
 8003bda:	4691      	mov	r9, r2
 8003bdc:	4680      	mov	r8, r0
 8003bde:	460c      	mov	r4, r1
 8003be0:	469a      	mov	sl, r3
 8003be2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003be6:	d807      	bhi.n	8003bf8 <_printf_i+0x28>
 8003be8:	2f62      	cmp	r7, #98	; 0x62
 8003bea:	d80a      	bhi.n	8003c02 <_printf_i+0x32>
 8003bec:	2f00      	cmp	r7, #0
 8003bee:	f000 80d8 	beq.w	8003da2 <_printf_i+0x1d2>
 8003bf2:	2f58      	cmp	r7, #88	; 0x58
 8003bf4:	f000 80a3 	beq.w	8003d3e <_printf_i+0x16e>
 8003bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c00:	e03a      	b.n	8003c78 <_printf_i+0xa8>
 8003c02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c06:	2b15      	cmp	r3, #21
 8003c08:	d8f6      	bhi.n	8003bf8 <_printf_i+0x28>
 8003c0a:	a101      	add	r1, pc, #4	; (adr r1, 8003c10 <_printf_i+0x40>)
 8003c0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c10:	08003c69 	.word	0x08003c69
 8003c14:	08003c7d 	.word	0x08003c7d
 8003c18:	08003bf9 	.word	0x08003bf9
 8003c1c:	08003bf9 	.word	0x08003bf9
 8003c20:	08003bf9 	.word	0x08003bf9
 8003c24:	08003bf9 	.word	0x08003bf9
 8003c28:	08003c7d 	.word	0x08003c7d
 8003c2c:	08003bf9 	.word	0x08003bf9
 8003c30:	08003bf9 	.word	0x08003bf9
 8003c34:	08003bf9 	.word	0x08003bf9
 8003c38:	08003bf9 	.word	0x08003bf9
 8003c3c:	08003d89 	.word	0x08003d89
 8003c40:	08003cad 	.word	0x08003cad
 8003c44:	08003d6b 	.word	0x08003d6b
 8003c48:	08003bf9 	.word	0x08003bf9
 8003c4c:	08003bf9 	.word	0x08003bf9
 8003c50:	08003dab 	.word	0x08003dab
 8003c54:	08003bf9 	.word	0x08003bf9
 8003c58:	08003cad 	.word	0x08003cad
 8003c5c:	08003bf9 	.word	0x08003bf9
 8003c60:	08003bf9 	.word	0x08003bf9
 8003c64:	08003d73 	.word	0x08003d73
 8003c68:	682b      	ldr	r3, [r5, #0]
 8003c6a:	1d1a      	adds	r2, r3, #4
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	602a      	str	r2, [r5, #0]
 8003c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e0a3      	b.n	8003dc4 <_printf_i+0x1f4>
 8003c7c:	6820      	ldr	r0, [r4, #0]
 8003c7e:	6829      	ldr	r1, [r5, #0]
 8003c80:	0606      	lsls	r6, r0, #24
 8003c82:	f101 0304 	add.w	r3, r1, #4
 8003c86:	d50a      	bpl.n	8003c9e <_printf_i+0xce>
 8003c88:	680e      	ldr	r6, [r1, #0]
 8003c8a:	602b      	str	r3, [r5, #0]
 8003c8c:	2e00      	cmp	r6, #0
 8003c8e:	da03      	bge.n	8003c98 <_printf_i+0xc8>
 8003c90:	232d      	movs	r3, #45	; 0x2d
 8003c92:	4276      	negs	r6, r6
 8003c94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c98:	485e      	ldr	r0, [pc, #376]	; (8003e14 <_printf_i+0x244>)
 8003c9a:	230a      	movs	r3, #10
 8003c9c:	e019      	b.n	8003cd2 <_printf_i+0x102>
 8003c9e:	680e      	ldr	r6, [r1, #0]
 8003ca0:	602b      	str	r3, [r5, #0]
 8003ca2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ca6:	bf18      	it	ne
 8003ca8:	b236      	sxthne	r6, r6
 8003caa:	e7ef      	b.n	8003c8c <_printf_i+0xbc>
 8003cac:	682b      	ldr	r3, [r5, #0]
 8003cae:	6820      	ldr	r0, [r4, #0]
 8003cb0:	1d19      	adds	r1, r3, #4
 8003cb2:	6029      	str	r1, [r5, #0]
 8003cb4:	0601      	lsls	r1, r0, #24
 8003cb6:	d501      	bpl.n	8003cbc <_printf_i+0xec>
 8003cb8:	681e      	ldr	r6, [r3, #0]
 8003cba:	e002      	b.n	8003cc2 <_printf_i+0xf2>
 8003cbc:	0646      	lsls	r6, r0, #25
 8003cbe:	d5fb      	bpl.n	8003cb8 <_printf_i+0xe8>
 8003cc0:	881e      	ldrh	r6, [r3, #0]
 8003cc2:	4854      	ldr	r0, [pc, #336]	; (8003e14 <_printf_i+0x244>)
 8003cc4:	2f6f      	cmp	r7, #111	; 0x6f
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2308      	moveq	r3, #8
 8003cca:	230a      	movne	r3, #10
 8003ccc:	2100      	movs	r1, #0
 8003cce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cd2:	6865      	ldr	r5, [r4, #4]
 8003cd4:	60a5      	str	r5, [r4, #8]
 8003cd6:	2d00      	cmp	r5, #0
 8003cd8:	bfa2      	ittt	ge
 8003cda:	6821      	ldrge	r1, [r4, #0]
 8003cdc:	f021 0104 	bicge.w	r1, r1, #4
 8003ce0:	6021      	strge	r1, [r4, #0]
 8003ce2:	b90e      	cbnz	r6, 8003ce8 <_printf_i+0x118>
 8003ce4:	2d00      	cmp	r5, #0
 8003ce6:	d04d      	beq.n	8003d84 <_printf_i+0x1b4>
 8003ce8:	4615      	mov	r5, r2
 8003cea:	fbb6 f1f3 	udiv	r1, r6, r3
 8003cee:	fb03 6711 	mls	r7, r3, r1, r6
 8003cf2:	5dc7      	ldrb	r7, [r0, r7]
 8003cf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003cf8:	4637      	mov	r7, r6
 8003cfa:	42bb      	cmp	r3, r7
 8003cfc:	460e      	mov	r6, r1
 8003cfe:	d9f4      	bls.n	8003cea <_printf_i+0x11a>
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d10b      	bne.n	8003d1c <_printf_i+0x14c>
 8003d04:	6823      	ldr	r3, [r4, #0]
 8003d06:	07de      	lsls	r6, r3, #31
 8003d08:	d508      	bpl.n	8003d1c <_printf_i+0x14c>
 8003d0a:	6923      	ldr	r3, [r4, #16]
 8003d0c:	6861      	ldr	r1, [r4, #4]
 8003d0e:	4299      	cmp	r1, r3
 8003d10:	bfde      	ittt	le
 8003d12:	2330      	movle	r3, #48	; 0x30
 8003d14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d1c:	1b52      	subs	r2, r2, r5
 8003d1e:	6122      	str	r2, [r4, #16]
 8003d20:	f8cd a000 	str.w	sl, [sp]
 8003d24:	464b      	mov	r3, r9
 8003d26:	aa03      	add	r2, sp, #12
 8003d28:	4621      	mov	r1, r4
 8003d2a:	4640      	mov	r0, r8
 8003d2c:	f7ff fee2 	bl	8003af4 <_printf_common>
 8003d30:	3001      	adds	r0, #1
 8003d32:	d14c      	bne.n	8003dce <_printf_i+0x1fe>
 8003d34:	f04f 30ff 	mov.w	r0, #4294967295
 8003d38:	b004      	add	sp, #16
 8003d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d3e:	4835      	ldr	r0, [pc, #212]	; (8003e14 <_printf_i+0x244>)
 8003d40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d44:	6829      	ldr	r1, [r5, #0]
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d4c:	6029      	str	r1, [r5, #0]
 8003d4e:	061d      	lsls	r5, r3, #24
 8003d50:	d514      	bpl.n	8003d7c <_printf_i+0x1ac>
 8003d52:	07df      	lsls	r7, r3, #31
 8003d54:	bf44      	itt	mi
 8003d56:	f043 0320 	orrmi.w	r3, r3, #32
 8003d5a:	6023      	strmi	r3, [r4, #0]
 8003d5c:	b91e      	cbnz	r6, 8003d66 <_printf_i+0x196>
 8003d5e:	6823      	ldr	r3, [r4, #0]
 8003d60:	f023 0320 	bic.w	r3, r3, #32
 8003d64:	6023      	str	r3, [r4, #0]
 8003d66:	2310      	movs	r3, #16
 8003d68:	e7b0      	b.n	8003ccc <_printf_i+0xfc>
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	f043 0320 	orr.w	r3, r3, #32
 8003d70:	6023      	str	r3, [r4, #0]
 8003d72:	2378      	movs	r3, #120	; 0x78
 8003d74:	4828      	ldr	r0, [pc, #160]	; (8003e18 <_printf_i+0x248>)
 8003d76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d7a:	e7e3      	b.n	8003d44 <_printf_i+0x174>
 8003d7c:	0659      	lsls	r1, r3, #25
 8003d7e:	bf48      	it	mi
 8003d80:	b2b6      	uxthmi	r6, r6
 8003d82:	e7e6      	b.n	8003d52 <_printf_i+0x182>
 8003d84:	4615      	mov	r5, r2
 8003d86:	e7bb      	b.n	8003d00 <_printf_i+0x130>
 8003d88:	682b      	ldr	r3, [r5, #0]
 8003d8a:	6826      	ldr	r6, [r4, #0]
 8003d8c:	6961      	ldr	r1, [r4, #20]
 8003d8e:	1d18      	adds	r0, r3, #4
 8003d90:	6028      	str	r0, [r5, #0]
 8003d92:	0635      	lsls	r5, r6, #24
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	d501      	bpl.n	8003d9c <_printf_i+0x1cc>
 8003d98:	6019      	str	r1, [r3, #0]
 8003d9a:	e002      	b.n	8003da2 <_printf_i+0x1d2>
 8003d9c:	0670      	lsls	r0, r6, #25
 8003d9e:	d5fb      	bpl.n	8003d98 <_printf_i+0x1c8>
 8003da0:	8019      	strh	r1, [r3, #0]
 8003da2:	2300      	movs	r3, #0
 8003da4:	6123      	str	r3, [r4, #16]
 8003da6:	4615      	mov	r5, r2
 8003da8:	e7ba      	b.n	8003d20 <_printf_i+0x150>
 8003daa:	682b      	ldr	r3, [r5, #0]
 8003dac:	1d1a      	adds	r2, r3, #4
 8003dae:	602a      	str	r2, [r5, #0]
 8003db0:	681d      	ldr	r5, [r3, #0]
 8003db2:	6862      	ldr	r2, [r4, #4]
 8003db4:	2100      	movs	r1, #0
 8003db6:	4628      	mov	r0, r5
 8003db8:	f7fc fa1a 	bl	80001f0 <memchr>
 8003dbc:	b108      	cbz	r0, 8003dc2 <_printf_i+0x1f2>
 8003dbe:	1b40      	subs	r0, r0, r5
 8003dc0:	6060      	str	r0, [r4, #4]
 8003dc2:	6863      	ldr	r3, [r4, #4]
 8003dc4:	6123      	str	r3, [r4, #16]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dcc:	e7a8      	b.n	8003d20 <_printf_i+0x150>
 8003dce:	6923      	ldr	r3, [r4, #16]
 8003dd0:	462a      	mov	r2, r5
 8003dd2:	4649      	mov	r1, r9
 8003dd4:	4640      	mov	r0, r8
 8003dd6:	47d0      	blx	sl
 8003dd8:	3001      	adds	r0, #1
 8003dda:	d0ab      	beq.n	8003d34 <_printf_i+0x164>
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	079b      	lsls	r3, r3, #30
 8003de0:	d413      	bmi.n	8003e0a <_printf_i+0x23a>
 8003de2:	68e0      	ldr	r0, [r4, #12]
 8003de4:	9b03      	ldr	r3, [sp, #12]
 8003de6:	4298      	cmp	r0, r3
 8003de8:	bfb8      	it	lt
 8003dea:	4618      	movlt	r0, r3
 8003dec:	e7a4      	b.n	8003d38 <_printf_i+0x168>
 8003dee:	2301      	movs	r3, #1
 8003df0:	4632      	mov	r2, r6
 8003df2:	4649      	mov	r1, r9
 8003df4:	4640      	mov	r0, r8
 8003df6:	47d0      	blx	sl
 8003df8:	3001      	adds	r0, #1
 8003dfa:	d09b      	beq.n	8003d34 <_printf_i+0x164>
 8003dfc:	3501      	adds	r5, #1
 8003dfe:	68e3      	ldr	r3, [r4, #12]
 8003e00:	9903      	ldr	r1, [sp, #12]
 8003e02:	1a5b      	subs	r3, r3, r1
 8003e04:	42ab      	cmp	r3, r5
 8003e06:	dcf2      	bgt.n	8003dee <_printf_i+0x21e>
 8003e08:	e7eb      	b.n	8003de2 <_printf_i+0x212>
 8003e0a:	2500      	movs	r5, #0
 8003e0c:	f104 0619 	add.w	r6, r4, #25
 8003e10:	e7f5      	b.n	8003dfe <_printf_i+0x22e>
 8003e12:	bf00      	nop
 8003e14:	080042a5 	.word	0x080042a5
 8003e18:	080042b6 	.word	0x080042b6

08003e1c <memcpy>:
 8003e1c:	440a      	add	r2, r1
 8003e1e:	4291      	cmp	r1, r2
 8003e20:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e24:	d100      	bne.n	8003e28 <memcpy+0xc>
 8003e26:	4770      	bx	lr
 8003e28:	b510      	push	{r4, lr}
 8003e2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e32:	4291      	cmp	r1, r2
 8003e34:	d1f9      	bne.n	8003e2a <memcpy+0xe>
 8003e36:	bd10      	pop	{r4, pc}

08003e38 <memmove>:
 8003e38:	4288      	cmp	r0, r1
 8003e3a:	b510      	push	{r4, lr}
 8003e3c:	eb01 0402 	add.w	r4, r1, r2
 8003e40:	d902      	bls.n	8003e48 <memmove+0x10>
 8003e42:	4284      	cmp	r4, r0
 8003e44:	4623      	mov	r3, r4
 8003e46:	d807      	bhi.n	8003e58 <memmove+0x20>
 8003e48:	1e43      	subs	r3, r0, #1
 8003e4a:	42a1      	cmp	r1, r4
 8003e4c:	d008      	beq.n	8003e60 <memmove+0x28>
 8003e4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e56:	e7f8      	b.n	8003e4a <memmove+0x12>
 8003e58:	4402      	add	r2, r0
 8003e5a:	4601      	mov	r1, r0
 8003e5c:	428a      	cmp	r2, r1
 8003e5e:	d100      	bne.n	8003e62 <memmove+0x2a>
 8003e60:	bd10      	pop	{r4, pc}
 8003e62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e6a:	e7f7      	b.n	8003e5c <memmove+0x24>

08003e6c <_free_r>:
 8003e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e6e:	2900      	cmp	r1, #0
 8003e70:	d044      	beq.n	8003efc <_free_r+0x90>
 8003e72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e76:	9001      	str	r0, [sp, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f1a1 0404 	sub.w	r4, r1, #4
 8003e7e:	bfb8      	it	lt
 8003e80:	18e4      	addlt	r4, r4, r3
 8003e82:	f000 f913 	bl	80040ac <__malloc_lock>
 8003e86:	4a1e      	ldr	r2, [pc, #120]	; (8003f00 <_free_r+0x94>)
 8003e88:	9801      	ldr	r0, [sp, #4]
 8003e8a:	6813      	ldr	r3, [r2, #0]
 8003e8c:	b933      	cbnz	r3, 8003e9c <_free_r+0x30>
 8003e8e:	6063      	str	r3, [r4, #4]
 8003e90:	6014      	str	r4, [r2, #0]
 8003e92:	b003      	add	sp, #12
 8003e94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e98:	f000 b90e 	b.w	80040b8 <__malloc_unlock>
 8003e9c:	42a3      	cmp	r3, r4
 8003e9e:	d908      	bls.n	8003eb2 <_free_r+0x46>
 8003ea0:	6825      	ldr	r5, [r4, #0]
 8003ea2:	1961      	adds	r1, r4, r5
 8003ea4:	428b      	cmp	r3, r1
 8003ea6:	bf01      	itttt	eq
 8003ea8:	6819      	ldreq	r1, [r3, #0]
 8003eaa:	685b      	ldreq	r3, [r3, #4]
 8003eac:	1949      	addeq	r1, r1, r5
 8003eae:	6021      	streq	r1, [r4, #0]
 8003eb0:	e7ed      	b.n	8003e8e <_free_r+0x22>
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	b10b      	cbz	r3, 8003ebc <_free_r+0x50>
 8003eb8:	42a3      	cmp	r3, r4
 8003eba:	d9fa      	bls.n	8003eb2 <_free_r+0x46>
 8003ebc:	6811      	ldr	r1, [r2, #0]
 8003ebe:	1855      	adds	r5, r2, r1
 8003ec0:	42a5      	cmp	r5, r4
 8003ec2:	d10b      	bne.n	8003edc <_free_r+0x70>
 8003ec4:	6824      	ldr	r4, [r4, #0]
 8003ec6:	4421      	add	r1, r4
 8003ec8:	1854      	adds	r4, r2, r1
 8003eca:	42a3      	cmp	r3, r4
 8003ecc:	6011      	str	r1, [r2, #0]
 8003ece:	d1e0      	bne.n	8003e92 <_free_r+0x26>
 8003ed0:	681c      	ldr	r4, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	6053      	str	r3, [r2, #4]
 8003ed6:	4421      	add	r1, r4
 8003ed8:	6011      	str	r1, [r2, #0]
 8003eda:	e7da      	b.n	8003e92 <_free_r+0x26>
 8003edc:	d902      	bls.n	8003ee4 <_free_r+0x78>
 8003ede:	230c      	movs	r3, #12
 8003ee0:	6003      	str	r3, [r0, #0]
 8003ee2:	e7d6      	b.n	8003e92 <_free_r+0x26>
 8003ee4:	6825      	ldr	r5, [r4, #0]
 8003ee6:	1961      	adds	r1, r4, r5
 8003ee8:	428b      	cmp	r3, r1
 8003eea:	bf04      	itt	eq
 8003eec:	6819      	ldreq	r1, [r3, #0]
 8003eee:	685b      	ldreq	r3, [r3, #4]
 8003ef0:	6063      	str	r3, [r4, #4]
 8003ef2:	bf04      	itt	eq
 8003ef4:	1949      	addeq	r1, r1, r5
 8003ef6:	6021      	streq	r1, [r4, #0]
 8003ef8:	6054      	str	r4, [r2, #4]
 8003efa:	e7ca      	b.n	8003e92 <_free_r+0x26>
 8003efc:	b003      	add	sp, #12
 8003efe:	bd30      	pop	{r4, r5, pc}
 8003f00:	2000028c 	.word	0x2000028c

08003f04 <sbrk_aligned>:
 8003f04:	b570      	push	{r4, r5, r6, lr}
 8003f06:	4e0e      	ldr	r6, [pc, #56]	; (8003f40 <sbrk_aligned+0x3c>)
 8003f08:	460c      	mov	r4, r1
 8003f0a:	6831      	ldr	r1, [r6, #0]
 8003f0c:	4605      	mov	r5, r0
 8003f0e:	b911      	cbnz	r1, 8003f16 <sbrk_aligned+0x12>
 8003f10:	f000 f8bc 	bl	800408c <_sbrk_r>
 8003f14:	6030      	str	r0, [r6, #0]
 8003f16:	4621      	mov	r1, r4
 8003f18:	4628      	mov	r0, r5
 8003f1a:	f000 f8b7 	bl	800408c <_sbrk_r>
 8003f1e:	1c43      	adds	r3, r0, #1
 8003f20:	d00a      	beq.n	8003f38 <sbrk_aligned+0x34>
 8003f22:	1cc4      	adds	r4, r0, #3
 8003f24:	f024 0403 	bic.w	r4, r4, #3
 8003f28:	42a0      	cmp	r0, r4
 8003f2a:	d007      	beq.n	8003f3c <sbrk_aligned+0x38>
 8003f2c:	1a21      	subs	r1, r4, r0
 8003f2e:	4628      	mov	r0, r5
 8003f30:	f000 f8ac 	bl	800408c <_sbrk_r>
 8003f34:	3001      	adds	r0, #1
 8003f36:	d101      	bne.n	8003f3c <sbrk_aligned+0x38>
 8003f38:	f04f 34ff 	mov.w	r4, #4294967295
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	bd70      	pop	{r4, r5, r6, pc}
 8003f40:	20000290 	.word	0x20000290

08003f44 <_malloc_r>:
 8003f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f48:	1ccd      	adds	r5, r1, #3
 8003f4a:	f025 0503 	bic.w	r5, r5, #3
 8003f4e:	3508      	adds	r5, #8
 8003f50:	2d0c      	cmp	r5, #12
 8003f52:	bf38      	it	cc
 8003f54:	250c      	movcc	r5, #12
 8003f56:	2d00      	cmp	r5, #0
 8003f58:	4607      	mov	r7, r0
 8003f5a:	db01      	blt.n	8003f60 <_malloc_r+0x1c>
 8003f5c:	42a9      	cmp	r1, r5
 8003f5e:	d905      	bls.n	8003f6c <_malloc_r+0x28>
 8003f60:	230c      	movs	r3, #12
 8003f62:	603b      	str	r3, [r7, #0]
 8003f64:	2600      	movs	r6, #0
 8003f66:	4630      	mov	r0, r6
 8003f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f6c:	4e2e      	ldr	r6, [pc, #184]	; (8004028 <_malloc_r+0xe4>)
 8003f6e:	f000 f89d 	bl	80040ac <__malloc_lock>
 8003f72:	6833      	ldr	r3, [r6, #0]
 8003f74:	461c      	mov	r4, r3
 8003f76:	bb34      	cbnz	r4, 8003fc6 <_malloc_r+0x82>
 8003f78:	4629      	mov	r1, r5
 8003f7a:	4638      	mov	r0, r7
 8003f7c:	f7ff ffc2 	bl	8003f04 <sbrk_aligned>
 8003f80:	1c43      	adds	r3, r0, #1
 8003f82:	4604      	mov	r4, r0
 8003f84:	d14d      	bne.n	8004022 <_malloc_r+0xde>
 8003f86:	6834      	ldr	r4, [r6, #0]
 8003f88:	4626      	mov	r6, r4
 8003f8a:	2e00      	cmp	r6, #0
 8003f8c:	d140      	bne.n	8004010 <_malloc_r+0xcc>
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	4631      	mov	r1, r6
 8003f92:	4638      	mov	r0, r7
 8003f94:	eb04 0803 	add.w	r8, r4, r3
 8003f98:	f000 f878 	bl	800408c <_sbrk_r>
 8003f9c:	4580      	cmp	r8, r0
 8003f9e:	d13a      	bne.n	8004016 <_malloc_r+0xd2>
 8003fa0:	6821      	ldr	r1, [r4, #0]
 8003fa2:	3503      	adds	r5, #3
 8003fa4:	1a6d      	subs	r5, r5, r1
 8003fa6:	f025 0503 	bic.w	r5, r5, #3
 8003faa:	3508      	adds	r5, #8
 8003fac:	2d0c      	cmp	r5, #12
 8003fae:	bf38      	it	cc
 8003fb0:	250c      	movcc	r5, #12
 8003fb2:	4629      	mov	r1, r5
 8003fb4:	4638      	mov	r0, r7
 8003fb6:	f7ff ffa5 	bl	8003f04 <sbrk_aligned>
 8003fba:	3001      	adds	r0, #1
 8003fbc:	d02b      	beq.n	8004016 <_malloc_r+0xd2>
 8003fbe:	6823      	ldr	r3, [r4, #0]
 8003fc0:	442b      	add	r3, r5
 8003fc2:	6023      	str	r3, [r4, #0]
 8003fc4:	e00e      	b.n	8003fe4 <_malloc_r+0xa0>
 8003fc6:	6822      	ldr	r2, [r4, #0]
 8003fc8:	1b52      	subs	r2, r2, r5
 8003fca:	d41e      	bmi.n	800400a <_malloc_r+0xc6>
 8003fcc:	2a0b      	cmp	r2, #11
 8003fce:	d916      	bls.n	8003ffe <_malloc_r+0xba>
 8003fd0:	1961      	adds	r1, r4, r5
 8003fd2:	42a3      	cmp	r3, r4
 8003fd4:	6025      	str	r5, [r4, #0]
 8003fd6:	bf18      	it	ne
 8003fd8:	6059      	strne	r1, [r3, #4]
 8003fda:	6863      	ldr	r3, [r4, #4]
 8003fdc:	bf08      	it	eq
 8003fde:	6031      	streq	r1, [r6, #0]
 8003fe0:	5162      	str	r2, [r4, r5]
 8003fe2:	604b      	str	r3, [r1, #4]
 8003fe4:	4638      	mov	r0, r7
 8003fe6:	f104 060b 	add.w	r6, r4, #11
 8003fea:	f000 f865 	bl	80040b8 <__malloc_unlock>
 8003fee:	f026 0607 	bic.w	r6, r6, #7
 8003ff2:	1d23      	adds	r3, r4, #4
 8003ff4:	1af2      	subs	r2, r6, r3
 8003ff6:	d0b6      	beq.n	8003f66 <_malloc_r+0x22>
 8003ff8:	1b9b      	subs	r3, r3, r6
 8003ffa:	50a3      	str	r3, [r4, r2]
 8003ffc:	e7b3      	b.n	8003f66 <_malloc_r+0x22>
 8003ffe:	6862      	ldr	r2, [r4, #4]
 8004000:	42a3      	cmp	r3, r4
 8004002:	bf0c      	ite	eq
 8004004:	6032      	streq	r2, [r6, #0]
 8004006:	605a      	strne	r2, [r3, #4]
 8004008:	e7ec      	b.n	8003fe4 <_malloc_r+0xa0>
 800400a:	4623      	mov	r3, r4
 800400c:	6864      	ldr	r4, [r4, #4]
 800400e:	e7b2      	b.n	8003f76 <_malloc_r+0x32>
 8004010:	4634      	mov	r4, r6
 8004012:	6876      	ldr	r6, [r6, #4]
 8004014:	e7b9      	b.n	8003f8a <_malloc_r+0x46>
 8004016:	230c      	movs	r3, #12
 8004018:	603b      	str	r3, [r7, #0]
 800401a:	4638      	mov	r0, r7
 800401c:	f000 f84c 	bl	80040b8 <__malloc_unlock>
 8004020:	e7a1      	b.n	8003f66 <_malloc_r+0x22>
 8004022:	6025      	str	r5, [r4, #0]
 8004024:	e7de      	b.n	8003fe4 <_malloc_r+0xa0>
 8004026:	bf00      	nop
 8004028:	2000028c 	.word	0x2000028c

0800402c <_realloc_r>:
 800402c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004030:	4680      	mov	r8, r0
 8004032:	4614      	mov	r4, r2
 8004034:	460e      	mov	r6, r1
 8004036:	b921      	cbnz	r1, 8004042 <_realloc_r+0x16>
 8004038:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800403c:	4611      	mov	r1, r2
 800403e:	f7ff bf81 	b.w	8003f44 <_malloc_r>
 8004042:	b92a      	cbnz	r2, 8004050 <_realloc_r+0x24>
 8004044:	f7ff ff12 	bl	8003e6c <_free_r>
 8004048:	4625      	mov	r5, r4
 800404a:	4628      	mov	r0, r5
 800404c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004050:	f000 f838 	bl	80040c4 <_malloc_usable_size_r>
 8004054:	4284      	cmp	r4, r0
 8004056:	4607      	mov	r7, r0
 8004058:	d802      	bhi.n	8004060 <_realloc_r+0x34>
 800405a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800405e:	d812      	bhi.n	8004086 <_realloc_r+0x5a>
 8004060:	4621      	mov	r1, r4
 8004062:	4640      	mov	r0, r8
 8004064:	f7ff ff6e 	bl	8003f44 <_malloc_r>
 8004068:	4605      	mov	r5, r0
 800406a:	2800      	cmp	r0, #0
 800406c:	d0ed      	beq.n	800404a <_realloc_r+0x1e>
 800406e:	42bc      	cmp	r4, r7
 8004070:	4622      	mov	r2, r4
 8004072:	4631      	mov	r1, r6
 8004074:	bf28      	it	cs
 8004076:	463a      	movcs	r2, r7
 8004078:	f7ff fed0 	bl	8003e1c <memcpy>
 800407c:	4631      	mov	r1, r6
 800407e:	4640      	mov	r0, r8
 8004080:	f7ff fef4 	bl	8003e6c <_free_r>
 8004084:	e7e1      	b.n	800404a <_realloc_r+0x1e>
 8004086:	4635      	mov	r5, r6
 8004088:	e7df      	b.n	800404a <_realloc_r+0x1e>
	...

0800408c <_sbrk_r>:
 800408c:	b538      	push	{r3, r4, r5, lr}
 800408e:	4d06      	ldr	r5, [pc, #24]	; (80040a8 <_sbrk_r+0x1c>)
 8004090:	2300      	movs	r3, #0
 8004092:	4604      	mov	r4, r0
 8004094:	4608      	mov	r0, r1
 8004096:	602b      	str	r3, [r5, #0]
 8004098:	f7fc fee8 	bl	8000e6c <_sbrk>
 800409c:	1c43      	adds	r3, r0, #1
 800409e:	d102      	bne.n	80040a6 <_sbrk_r+0x1a>
 80040a0:	682b      	ldr	r3, [r5, #0]
 80040a2:	b103      	cbz	r3, 80040a6 <_sbrk_r+0x1a>
 80040a4:	6023      	str	r3, [r4, #0]
 80040a6:	bd38      	pop	{r3, r4, r5, pc}
 80040a8:	20000294 	.word	0x20000294

080040ac <__malloc_lock>:
 80040ac:	4801      	ldr	r0, [pc, #4]	; (80040b4 <__malloc_lock+0x8>)
 80040ae:	f000 b811 	b.w	80040d4 <__retarget_lock_acquire_recursive>
 80040b2:	bf00      	nop
 80040b4:	20000298 	.word	0x20000298

080040b8 <__malloc_unlock>:
 80040b8:	4801      	ldr	r0, [pc, #4]	; (80040c0 <__malloc_unlock+0x8>)
 80040ba:	f000 b80c 	b.w	80040d6 <__retarget_lock_release_recursive>
 80040be:	bf00      	nop
 80040c0:	20000298 	.word	0x20000298

080040c4 <_malloc_usable_size_r>:
 80040c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040c8:	1f18      	subs	r0, r3, #4
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	bfbc      	itt	lt
 80040ce:	580b      	ldrlt	r3, [r1, r0]
 80040d0:	18c0      	addlt	r0, r0, r3
 80040d2:	4770      	bx	lr

080040d4 <__retarget_lock_acquire_recursive>:
 80040d4:	4770      	bx	lr

080040d6 <__retarget_lock_release_recursive>:
 80040d6:	4770      	bx	lr

080040d8 <_init>:
 80040d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040da:	bf00      	nop
 80040dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040de:	bc08      	pop	{r3}
 80040e0:	469e      	mov	lr, r3
 80040e2:	4770      	bx	lr

080040e4 <_fini>:
 80040e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e6:	bf00      	nop
 80040e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ea:	bc08      	pop	{r3}
 80040ec:	469e      	mov	lr, r3
 80040ee:	4770      	bx	lr
